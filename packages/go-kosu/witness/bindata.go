// Package witness Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../node_modules/@kosu/migrations/src/deployedAddresses.json
package witness

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Node_modulesKosuSystemContractsSrcDeployedaddressesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\x4f\x93\x1c\xb9\x71\xfd\x7d\x3f\x05\x83\xe7\xdf\x21\xff\x27\x72\x6f\xfa\x39\x14\xb2\xc3\x0e\xdb\x61\xcb\x3a\xd8\xa1\x03\x80\x4c\xac\x18\x22\x39\x8a\x99\xa1\x2c\x59\xa1\xef\xee\xe8\x59\x2d\x57\xec\xae\xe1\xd4\x0c\x7b\xe8\x15\xd9\xef\xb0\xc1\xed\xc6\x54\x02\x28\xe0\x55\x22\xf3\x65\xf5\x9f\xbe\x79\xf1\xe2\xc5\x8b\x97\xfc\xf2\xdb\x17\xdf\xff\xf3\xee\x7f\xff\xe5\x3a\xeb\xfa\x17\xfd\xb6\xfe\xbb\xff\xf1\x83\x6f\xee\xbe\x1d\xaf\xaf\xe6\x6f\xff\xbe\xdf\xfc\xe6\xe5\xb7\x2f\x5e\xc2\x1f\x94\xb0\x52\x18\x51\x47\xd8\x60\x8e\x44\x59\xa0\xbe\x1a\x70\xcf\x39\x6d\x60\xc2\x9c\xda\x3b\x50\x8e\xa1\x39\x78\x46\x21\xa5\x0b\x30\x05\xbd\xfc\x7f\x1b\x97\xff\xe7\x77\x6f\x46\x5d\xbf\xfc\xf6\x85\xb1\x37\x69\x7e\xd4\x66\x5e\xbd\xbd\xbd\xee\xf3\xf6\x67\x99\xd7\x75\x73\xf3\x7d\x47\x8a\xa7\x72\xb4\x36\xdc\x27\x0d\x5e\x49\xa3\x89\x3b\x86\x0b\x8f\x1c\x56\x58\x66\x4d\xf8\xd8\xe0\x7c\xf7\xe6\xdd\xeb\x7e\xfb\xea\xf7\xf5\x8b\x7e\xf3\x1f\x37\x95\x2f\xbf\x7d\x81\xd2\xb4\x01\x1c\xb5\x5c\xd7\x57\x6f\xbe\xb7\xd5\xbb\xaa\x24\x4c\x5d\xab\x79\x70\xf3\x35\x89\x25\x4b\x93\xa8\x26\x50\x34\x1e\xbd\x93\x1f\xdb\xfa\xee\xbd\x05\x89\x40\xa1\xa3\xaf\x5f\x5f\x7d\x77\x18\xcc\x7f\xfd\x7a\xe3\xf3\xff\xff\xfa\xea\x07\xeb\x70\xc1\x57\x8d\xe3\x55\x75\x7d\x75\x75\xfb\xf2\xdb\x17\x6f\xdf\xbd\x7e\x7d\xf4\xcd\xcd\x6d\xbf\x7d\x77\x58\x52\x78\xf4\xc5\xed\xd5\xf6\x1f\xdc\x5e\xf7\xb7\x37\x7d\xde\xbe\xba\x7a\xfb\xe3\x16\x6f\x43\x91\x47\x11\x65\x0d\x88\xa5\x84\x94\x51\xa5\x3c\xda\x22\x14\x1a\x32\x21\xb5\x5b\x35\x06\xb2\xd1\xd6\xd2\xc6\x56\x1a\xe6\x84\x3e\x4e\xb6\xf8\x5f\x19\xf9\x87\xb7\x59\x7f\x78\xf9\xed\x8b\xe3\x9d\x70\xfb\xea\x4d\xdd\xdc\xf6\x37\xbf\x3b\xf4\x5d\xad\x31\x34\x46\x7b\xdf\xe6\xcf\x3f\x36\x7f\xf9\xb3\x77\xb7\xbf\xb9\xba\x7e\xf5\x3f\x95\x7f\xa1\x83\xba\x79\x90\xb4\xda\xea\xc1\x5e\xa0\x34\xb5\xa8\x01\x66\x08\xb7\x01\x2b\xbb\x34\x2c\x84\x4c\xd0\xd1\xac\x4f\x22\x5b\x3e\xd7\x98\xdd\x57\xd5\xc0\x61\xaa\x94\x7b\x48\x2b\xf6\x90\x56\xf0\xf0\x20\x80\x99\xc4\x4d\x90\x1d\x81\x44\xc8\x27\xc7\xd4\x92\x99\x18\xa1\x3e\x63\x0f\x69\x85\xa2\xe1\xb1\xd5\x73\x72\x16\x0b\x9e\x92\xe2\x0f\x9c\xf5\xc1\xa7\x07\xfc\xe9\xe4\x93\xbb\xf6\xfd\x0c\xc3\xff\x4c\xb7\xf5\x31\xb7\xf7\x7d\xdb\xec\xb7\xfd\xfb\xde\xdc\x77\xb5\xd7\x57\xdf\xfd\xb0\xec\xe1\x9e\x26\xd7\xf5\xe6\xea\xf7\x77\x73\xbe\xfa\xeb\x9b\xba\xa7\xd5\xed\xd5\xef\x5e\xcd\xed\xc9\x7f\xdf\xe6\xb0\x7b\x0b\xc0\x63\x2a\xa3\x69\xa0\x20\xcb\x61\x62\x57\x42\x97\x45\x4d\x30\x24\x7c\x85\x13\x75\xce\xde\x57\xf1\x10\x6c\xb6\x6c\x98\xa8\xd7\x31\xdb\x1c\x5d\xfd\xcc\x5c\xb6\xf3\xea\xbb\xd7\xf2\xe6\xc5\x7f\x7d\xdf\x7c\x6e\x91\x9f\xcc\x72\x34\x45\xa0\xea\x8d\x90\x7d\x59\x05\xce\x85\x60\xbe\xd8\xad\x8d\x1e\x6c\x2e\x21\x48\xe0\x04\xa0\xea\xae\x68\x65\x9a\x91\xb5\xee\x5b\x05\x1b\x24\xa8\x0f\x37\xfd\xa7\x1f\xd7\xce\x61\x7a\xee\xbd\xf8\x1f\x7f\x57\x87\x26\x6f\x5e\xbd\xad\x3c\x9d\x84\x3f\x7f\xf3\x91\xe9\xf8\x74\x6f\xa3\x6d\xde\xb2\x8f\x7d\xf9\x89\xc0\x5d\xad\x68\xe3\xb3\x07\x7b\x23\x8f\xb7\xf3\x48\x3c\xfe\xa2\xfb\xff\x62\x6b\xc8\x8f\xc5\xe7\xf6\x36\xce\xbc\xe1\x76\x6c\xb4\x4d\x6f\x43\xb6\xbd\x8d\x9f\xff\xbe\xde\xde\xfe\xfc\xcd\xab\xdb\xdb\xbb\x67\xc1\xc7\xdd\x8c\x95\xe5\x38\x1b\x63\x73\x9a\xd5\x86\xc1\x80\x0e\x96\xa2\x64\x03\x74\x0d\xa5\x41\x73\xa8\xc5\x40\xd2\x31\xa2\x3b\x26\xcf\xd9\x56\x4d\xe9\xa1\x3b\xdc\x8c\x38\x9e\xeb\x4d\x37\x23\x55\x73\x95\x59\xd6\x9c\x63\xe5\x4c\x31\x82\x68\xd3\x46\x76\x0d\x33\x5b\x19\xd9\x57\xed\x71\x33\x0c\x88\x81\x9f\xd1\xcd\xa0\x06\xe6\xc7\xb7\xe8\x72\x34\xba\x60\x07\x3e\x37\x59\xad\xd9\x07\x46\x8b\x01\x2a\x2d\xc1\x85\x39\xfa\x82\xa2\x35\xc0\x1c\xb1\xcd\x61\xa3\xb2\xaa\x62\x4e\xb0\x52\x17\x98\x8a\x23\xbd\x48\xd6\x3a\xf1\xeb\x9f\x78\x34\x32\xda\x24\xab\x7f\xbc\xba\x79\xf7\xcb\xab\xdf\xd6\xdb\x07\x99\x8a\x16\x0b\x83\x74\x8a\x6c\x0b\x1c\x10\x67\x66\x07\x01\xb7\x24\xd7\x58\x8d\x92\xca\xdc\xcb\x26\x23\x7a\xb8\x36\xec\x30\xc7\x00\xc2\x35\xdb\x1e\xa6\x3a\xe6\x8c\x4d\xa6\x12\x5f\x3c\xc6\x64\xed\x33\x79\xb5\xa9\x83\x46\x0b\x69\x93\x63\x11\x2f\x9e\x56\x84\x4b\xfb\x1e\xa6\x62\xba\x73\x76\x9f\xf3\x44\x04\x88\xc1\xc7\x16\x2e\x5c\x75\xc1\x0e\x7c\x76\xae\x22\x2f\x59\x12\xd9\xb2\x19\x79\xc1\xb0\x40\x95\xee\x1d\x9b\x8c\x56\x19\x1c\x32\x70\xf8\x8a\x9a\x5a\x0d\x60\x0a\x0b\x0c\xa7\x8e\xea\x7a\x12\x38\xdd\xe0\xaa\x93\xfe\x6d\x70\x95\xc3\x26\x57\xfd\xf2\xba\xfa\xcd\xbb\xeb\x87\x03\xce\x00\xea\x46\xda\x49\x06\x9a\x24\xd0\x2c\xac\x09\x13\x55\x24\xbd\xcd\x6e\x61\x2d\x47\x0f\x14\x00\x2e\x0d\x20\x6d\x6d\x48\x9f\x9d\x8a\x65\x17\x55\x1d\x7b\x1f\x9b\x54\xc5\x1d\x13\x1b\x12\x7a\xd7\xec\xa9\x12\xc9\xd1\x3a\x4e\x74\x09\xc8\x5e\x07\x0a\xe5\x21\x7b\xa8\x8a\x50\x9d\xf0\x38\xce\x7d\x4e\xaa\xc2\x30\x0d\xbf\x50\xd5\x05\x4f\xc0\xe7\xa6\xaa\xf2\x0c\x6f\x43\x1b\x6b\x67\x5f\x8e\x44\x32\xa0\xa8\x8b\xeb\x60\x89\xc9\x55\x23\x6c\xae\xe1\x63\x86\x77\x0b\x94\xd1\x69\x1a\xf4\x58\x72\xea\x1d\x3c\xcd\xad\x12\x90\x4d\xaa\xfa\xd5\xd5\xed\xab\xb7\xdf\x3d\x48\x54\xa5\x59\x23\xd6\xe2\xd1\x67\xf9\x6a\xd6\xc0\x20\x71\xf6\x69\x72\xe7\x27\xce\x99\xa5\x60\x61\x7d\x82\x67\x91\x1a\x75\xce\x41\xdc\x70\x7a\x9e\x0c\x62\x8b\xa8\x76\x65\xc6\x48\x84\x98\x4d\x1d\xc7\x00\x91\x3b\x06\x59\x33\xd7\x82\x14\x5b\xa6\x49\xde\x8a\xdd\x76\x65\xc6\xc2\x38\xe8\xf8\xe6\x9e\x95\xa8\x40\x50\xf9\xd8\xc2\x85\xa8\x2e\xd8\x81\xcf\x4f\x54\xc1\x0c\x1d\x8d\x75\xcd\xd2\xb6\x04\x52\xc3\x12\x07\xa2\x10\xc5\xc8\x65\x52\x40\xb0\x3c\xa0\x13\x0a\x07\x0c\xe8\x4b\x09\x44\xa1\xef\x39\xff\xd9\x0e\xa2\x22\xde\x24\xaa\x7f\xbd\xba\xb9\xad\xeb\x7f\xab\xef\x5e\xdd\xdc\xee\xf0\xac\x68\x51\x23\x9e\xc6\x8c\x22\x01\x45\x3a\x27\xac\xde\x47\xae\x4e\x9e\xad\x87\x0f\x90\x0c\x35\x01\xe2\x25\x3c\x3b\xaf\xd4\x1e\x1e\x05\x84\xbb\xc2\x55\xbb\xb2\x62\x8a\xe0\xcc\xcb\x64\x48\x74\x05\x9a\xae\xa5\x3e\x63\x19\x8f\x6c\x33\x96\xc4\x50\xa1\xb9\x2b\x5c\x65\x62\xfe\x9c\x7c\xa5\xad\x69\xbb\x64\xf2\x2f\x78\x02\x3e\x37\x5d\x01\x8d\x0c\x8c\x9e\x73\xb4\x74\xcb\x52\xb5\x9a\xc1\xcd\x7a\x56\x85\xb6\x66\x6b\xc4\x18\x4b\x7d\x61\x15\xa3\x34\xd1\x05\x5e\xec\x63\x22\xed\x39\x02\xee\xf1\xab\x18\xb7\xfd\xaa\xfe\xfa\x55\xf6\xdb\xab\xfd\x8c\xb5\x6a\x3a\x46\x05\x21\x66\x32\x31\x24\x0f\x6c\x12\xcd\xb1\x20\x06\xa7\x85\x9b\x62\x86\xf4\x0e\x13\x0a\x64\x6a\x63\x2a\x86\xc8\x3e\xea\x64\x3c\xa7\x8c\xa5\x70\x3c\xa0\x4d\xc6\x5a\x48\x9d\x27\x3b\x1d\xce\xd6\x6b\x8e\x02\x4a\x96\xae\x39\x96\x8c\xc1\xd3\x33\x03\x58\x71\x0f\x63\xa9\x31\xc3\x89\x67\x77\x56\xca\x52\x85\xd3\x81\x7d\x52\x26\xff\x89\x13\xf0\x99\x6e\xec\x63\x6e\xf0\xfb\xb6\x8f\xca\xe4\xf3\x25\x93\xff\x53\xcf\xe4\xa7\x61\x74\x69\x6c\x45\x1c\xa3\x91\x4e\xed\x0c\xab\xa7\x19\x0c\x9b\xd2\xb1\x90\x59\x65\x16\x2f\xe6\xc5\x16\x30\x4c\x65\x20\x4e\x48\x69\xc7\x71\x9c\x2d\x63\x0f\xad\x86\x2f\x22\x93\x7f\x8e\xa4\xf2\x7d\x38\x5b\x26\xff\xf4\x42\xf2\xd4\x3e\xed\xee\x05\xde\x6b\xfb\x3e\x7c\xd9\x99\xfc\x33\x6f\xb8\x1d\x1b\x6d\xd3\xdb\x90\xed\x28\xce\x7f\xd6\xf5\xd5\xcf\xff\xf0\x2b\xfa\xf7\x77\xe3\xef\xfe\xf2\x48\x7f\x38\xf6\x2c\xde\xb2\x77\x6b\x8a\x05\x36\x27\x2a\x84\xc4\x12\x52\x1b\x04\xad\x75\x04\x4f\x14\xe6\x4e\x5d\x22\xac\xb5\x35\xba\xa1\x4b\x2b\x1c\xd2\x77\xe8\x06\x15\x8e\x43\xb4\x9b\xfe\xc6\xe0\xd0\x41\x86\xab\x91\xda\x0c\x9c\x28\x5c\x8b\x97\xcb\x04\x94\xac\x85\x59\xb8\x78\x97\x6e\x50\x95\x8d\x4e\xbc\x81\xb3\x86\x74\xdc\xad\xf9\xf1\x41\xf6\x72\x46\xba\x60\x07\x3e\x7b\x9a\xac\x25\xce\x11\x02\x40\xbd\x16\xcf\xee\x39\x26\x6b\xc6\x92\x1e\x80\x38\xe6\x34\x02\x2e\xad\x26\xb0\xa8\xd7\x40\xb4\x15\x36\x24\xd4\xfc\x54\x43\xb3\x95\x26\x3b\x76\xee\xb7\x68\xab\xfd\x55\x4c\xe7\xee\x5f\x7f\x21\xaf\x97\x07\x3e\xf9\x84\x82\x0d\xe8\x0b\xaa\x11\x29\x2e\x36\xb5\xae\x44\x63\x46\xa3\xc3\x58\x24\xa0\x8f\x11\xb3\xf3\x54\xf3\x82\x85\x92\x23\x96\x62\xd5\x8a\x34\x55\xeb\x27\xdb\xfc\x43\x0e\xc3\x5d\xa9\xb3\xd1\x56\x76\x63\xc1\xd5\x60\x8e\x5e\xd1\xbc\x0f\x9d\x09\x90\xb3\x14\x08\xc2\x8b\x51\x4f\x94\xe3\x5b\xf4\x25\x11\x04\xc7\xdc\xf2\x23\x7b\x4d\x25\x5c\xd2\x78\x19\x78\x0d\xad\x2e\x69\x83\x72\xe5\x48\x15\x40\x16\x57\xee\xcd\x4e\x82\x57\xdf\x7d\xdc\xc0\x85\xbc\x2e\xd8\x81\xe3\x55\x75\x26\x89\x64\x1f\x46\x3a\xd1\x5b\x17\x9c\x05\x3c\x88\xc8\x10\x0a\xa7\x7b\x40\x6f\x93\x56\xce\x10\x05\x18\xce\x20\x98\x89\x33\x44\xd6\x00\x13\x80\x3d\x61\x9c\x63\x99\xff\x31\x43\xb9\x82\x4b\xdb\x74\xac\x9e\x52\x90\x51\x9c\x54\xcb\xbb\x2c\xb0\xb5\xe6\xe8\x01\x09\x1d\x56\x4e\xb7\x15\xda\x34\x84\x70\x45\xb3\x66\xdd\x7a\x2b\xab\xf2\x94\xee\x23\x0b\xb5\xfb\x49\x5c\xe5\x88\x94\xf6\x15\x90\x89\x33\x42\xcc\x21\x87\x69\xe4\x95\xb4\x0a\xb0\x1a\x4f\x2b\x45\xd6\xef\x3b\x92\xbb\xd2\x64\x9b\xa5\x12\xe7\x24\xa5\xf3\xd7\x62\x3c\x71\xf8\x3f\xae\x90\xaf\x36\x86\xb1\xfb\x6e\x3e\x2a\x86\xf1\x70\xf8\xe9\xe3\x8b\xfc\x7d\xb3\x4d\x0a\x61\x74\xaf\x32\x69\xd2\x6b\x75\x64\x70\x86\x36\x83\x8a\x3a\x71\xa4\xc5\x48\x5b\x10\xda\x87\xac\xe4\x1c\xaa\x6d\xf6\x36\xb8\xb8\xb4\x8f\x7e\xbc\x32\xb7\x8c\x3d\x54\xe4\xf2\xbc\x14\xf0\xde\xcc\xe3\xcb\x6d\x3e\x39\xca\xf2\xc8\x50\xc3\x73\x94\x44\x7c\x14\xa7\x61\x87\xb6\xd1\x8b\x8f\x46\x59\xee\xeb\xf3\xd9\xa3\x2c\x7b\x70\xb6\x09\x3c\x1e\xf2\x53\x46\xf3\x3c\x8f\xfc\x33\xef\xd7\xa7\x3e\xf2\x75\x5b\xbc\xf7\xa8\xaa\x88\x56\x95\x32\xbd\x46\xd2\x2c\x86\x4a\xca\x2a\x47\x4e\x1f\x1d\xc5\xa6\xa7\xab\xae\xcc\x70\x5e\x15\x0b\x2b\x5d\x91\xa6\xfa\x28\xed\x0e\x27\x07\xac\x23\x1a\xdc\x95\x61\xa6\xc5\x7d\xd5\x5a\x10\x28\x8b\xd9\x2d\x66\xae\xb1\x78\xcd\xd5\x1c\x26\xf3\xa0\x3b\xa1\xf3\x2e\xed\x5e\x03\xe7\xfb\xeb\x2e\x3f\xfd\x59\xbf\x69\xe0\x72\x00\xb9\x60\x07\x9e\x87\x8d\x8a\x0d\x5d\x8d\x67\xb5\xb5\x72\x22\x6b\x8e\xb1\x0c\x6c\xd1\xe1\x49\xdd\x29\xa3\xfb\x1c\x45\x6b\x12\x4d\x04\x34\x5d\x43\x85\x63\xa0\x38\xd8\x1e\xd9\xcb\x2e\x36\xfa\xd4\xb2\x87\x36\xbb\x37\x95\x86\x58\x15\x30\xb1\x10\x5b\x6b\xca\x33\xb0\x64\xc9\x4a\x03\x94\x56\x24\xad\xa9\x43\x69\xc6\x50\x5d\xbc\xc8\x13\xaa\xf7\x93\xd9\xfd\x90\x8a\x4e\x64\x72\x9b\x54\x34\x67\xb3\xc6\x60\x69\xd8\xda\xa0\x81\xe4\xea\xdd\x27\x07\x19\x08\x0d\x49\x9e\x52\xb4\x2b\x94\x7b\x57\x8f\x10\xed\x39\xcf\x1d\x9b\x16\x2e\x64\x74\xc1\x0e\x3c\x0f\x19\x19\x04\x21\xce\x85\x11\xaa\xbd\x95\x04\x23\xd7\x00\x70\xc4\x21\xa3\x13\xaa\xe5\x60\x29\x96\xd1\x6d\x4a\x25\x00\x52\x6a\x4f\x6b\xa0\x6b\x4f\x9a\x69\x17\x19\x6d\xa7\x99\x76\xd7\x35\xa8\x64\xf4\xae\x5c\x0b\x97\x9b\x8f\xd9\xd5\xa4\xcc\x55\xb3\x21\x75\x1a\xb2\x96\x02\x75\xf7\x81\xec\x6d\xfa\x1c\xab\xf9\x0a\x1d\x9e\xbe\xea\x81\xb8\x2c\xed\xab\xbe\x32\x75\x5a\x01\x8d\x32\x49\x28\x26\x4d\xe4\xb6\x7a\x48\xe3\x6e\x9e\xb2\x28\x52\x4e\x75\x40\xf7\x28\x85\x0d\x3f\x92\x56\xfa\x74\x2e\xda\xb6\x70\xe1\xa2\x0b\x76\xe0\x79\xb8\xa8\x01\x6a\x54\xb3\xde\xda\x72\x5c\xda\xb5\x20\xbd\xe5\x62\x65\x96\x90\x88\xae\x89\x39\x7a\x39\x10\xb3\x76\x68\x38\x8c\x04\xb9\xeb\x68\x71\xa2\x68\x7d\x2a\x17\x6d\x17\xaf\xef\x2d\x5c\xb0\x41\x9d\x8d\x5b\x96\x29\x44\x5a\x8e\x45\xda\xb3\x68\xa8\x20\xad\x81\x05\x28\x9d\x00\x46\x6a\x87\x49\xa9\xb8\x42\xcd\x35\xc3\x87\x9c\x04\x48\x8f\x98\x68\x57\x86\x48\xd3\x60\x06\x67\x1b\xd2\xac\xd1\x4c\x6e\x3e\xdb\x28\xaf\x10\xc3\x61\x5e\x73\x8d\xea\xbb\x0e\x68\xdb\x15\x05\x67\x65\xa2\x4b\xcd\xc2\x05\x4f\xc5\xf3\x30\x91\x0f\x59\xb8\xaa\x51\xac\x8e\x2c\x43\x80\x55\xa4\xf3\x68\x32\x86\x91\xcf\x85\x3c\xb5\x8c\xe7\x04\x72\x53\xed\x2a\x54\x53\xa8\x03\x99\xca\xd9\x02\x46\xdb\x39\xa2\x47\x56\x26\x04\x57\xcc\xae\x3e\xbb\x08\x7b\xaa\x61\xe2\x28\x1e\x7d\xac\xa8\xec\x0b\x2c\xc0\xd3\xcb\xb8\x8f\x64\x9e\x04\x4b\x7d\xa9\x8e\xd5\x0c\x6d\x3c\xa0\xf3\xa5\x5d\xe9\x21\x2f\x53\x96\xd1\x08\xd4\x91\x49\xac\x02\x3b\xca\x10\xa3\xa4\x1c\xb3\x4f\xae\x2c\x3c\xf1\xc3\x36\x25\x37\x5b\x35\x03\xe7\x24\xa4\x4b\x51\xc2\x05\x4f\xc5\xf3\xf0\x51\xb0\x27\x18\xf7\xce\xb2\x20\x21\xa4\x66\xad\xe9\x12\xd5\x96\x89\xc8\x4a\x9a\x23\xa8\x61\x02\x90\xb2\xcf\xc6\x43\x88\x11\x84\xda\x9c\x6d\x8f\xac\x66\x0f\x1f\xd9\x76\x00\xfb\xf1\xa5\x07\xee\xc9\xd5\xd1\x1c\x27\x38\x06\xfa\xac\x44\x98\x5c\x6d\xda\xc1\x09\x04\x9c\xca\xc8\x3d\x7b\xe6\x1c\x18\xbe\x6a\x96\x8d\x46\x02\x2d\x33\x1e\xc8\x58\xd3\xae\x28\x36\x03\x8e\x01\xd0\x16\xf5\xd6\x79\xf6\x8a\xc0\xe6\xc2\xab\x84\x85\x9a\x2a\x72\x90\xfb\xae\xe3\xda\x76\x4d\xc0\x59\x39\xe9\xfc\x55\x07\x4f\x9c\x80\x1f\x57\xc8\x25\x67\xfd\x7f\x9a\xb3\x3e\x5e\xe6\xef\x9b\x6d\xe7\xc0\x56\x8d\xe2\x1e\xca\x2b\x65\x65\x13\xf6\x89\xbe\x18\x3d\x98\x57\x83\xc9\x64\x0e\x1d\xa0\x88\x2a\x24\xab\x8f\x74\x5b\xd4\x28\xb2\x54\xee\x7d\x8b\xe4\xd3\x73\xd6\x67\x26\x81\xf7\x66\x3e\x7b\xce\xfa\xd1\x2f\xa1\x7b\x64\xca\xf5\xd3\xdf\x9c\x77\x86\xca\x80\x2f\x26\x67\xfd\x41\x87\x7f\xc2\x39\xeb\xf3\xee\xd7\x27\x3f\xf2\xb7\xb3\x44\x4f\xd1\xff\xe3\xd0\xa5\x73\x85\x37\xea\x9d\x4d\x0c\x13\x5a\xe4\x64\x70\x8a\x86\xd5\xd0\xa2\xa8\x6b\x4a\x0e\x8b\x6c\xad\xa3\x15\x35\x11\x18\x81\x34\x1f\xd0\xff\x9f\x04\x10\x36\x1f\xfa\x87\xe3\x59\x79\xe2\x80\x10\x6f\x3e\x07\x32\xba\x14\xb6\x8e\x07\x8f\x4a\x90\x3c\xba\xed\x7b\x65\xf0\xb6\x30\xff\xac\x91\x91\x8b\xf4\xff\x82\xa7\xe2\x79\x68\x69\x4e\x59\x45\x2b\x4d\x74\x6a\xd9\x9a\x91\x24\x9e\xb9\x06\x2a\x9b\xb5\x3e\xd6\x6c\xb2\x24\x91\x3c\x51\x5a\x00\xba\x56\x57\x5d\x25\x6d\xd2\xc9\x0b\xa4\x9e\x4a\x4b\x7f\x95\x2f\xfa\xe6\xc5\x87\xfa\x7e\xfd\x14\x7d\x3f\x23\x5a\x37\x5a\x54\xa2\xca\x2d\x7a\x7a\xd8\x82\x80\x65\x3a\x9b\x06\xcf\x8e\x35\x46\x0c\x38\x50\x58\xf6\x06\x53\xba\x69\x55\x54\x18\x9f\xa4\xc3\x3e\xe4\xa8\x8b\xbc\xff\x42\x50\x17\xfc\x80\x2f\x58\xde\x8f\xa0\xdb\x2f\x95\x79\x8a\xbc\x7f\x32\x76\x51\x57\x89\x39\xb8\x1f\x9c\x14\x2d\x8b\x3e\x65\xe1\xa8\x0a\xf3\x61\xe2\xb5\x82\xad\xaf\x46\x74\xe0\x5f\xf3\xce\x93\x85\xe6\x8a\xf5\x80\xce\xe6\x78\xf3\x5e\xd4\xfd\x2f\x4e\x22\x25\x17\x75\xff\xdf\x76\xa4\xc4\x1e\x15\x28\xf9\xc9\x89\xfb\xcf\x4c\x00\xef\xcd\x5c\xc4\xfd\x27\xb8\x88\xfb\xef\xc1\x4f\x38\x50\xf2\x53\x10\xf7\xdf\xfb\xc0\x7f\x94\xb8\x5f\xc5\xc8\x3c\x86\x77\x9c\xd4\x27\x93\x1a\xfa\x74\x6b\x81\xe0\xc5\x16\xb2\x12\xfb\xc4\xbe\x26\xd3\xe2\xb8\x7b\x8b\xf8\x62\x2f\x6e\xcc\x72\xfa\x42\xf4\x0f\x59\x70\xdf\xeb\x2e\x2f\xda\xfe\x0b\xbe\x06\x7c\xc1\xda\xfe\x7b\xc9\xe8\x11\x3f\x69\x30\xb9\x20\x9c\x29\xe7\x22\x28\x22\x08\x62\x44\x89\xd5\xdb\x40\xca\x88\x6a\xd4\x55\x13\x5b\xdd\xf9\xa9\x61\xae\x09\x3d\x85\x5a\xab\xf9\x80\x8a\xed\x58\x01\x7f\x91\xf6\x5f\xf0\x35\xe3\x0b\x96\xf6\xdf\xcb\x45\xbb\xa5\xfd\x96\x30\x3d\x06\x4f\x10\x61\x8d\x3b\x59\xc2\x88\x42\x69\x86\xea\x03\x5b\x5a\xc5\xea\x80\x2b\x32\xdb\x4a\x12\xb7\x52\x9d\xea\x0e\xdd\xec\x01\xad\xc8\x2e\xa9\xc8\x45\xd9\x7f\xc1\x57\x82\x2f\x58\xd9\x7f\x2f\x15\xed\x54\xf6\xf7\x14\x51\x29\x90\xc6\xaa\x73\x36\xbf\xfb\xdd\x97\xd6\x83\x0f\x24\x6a\x13\x3a\x8b\xcd\xa4\x15\x53\x64\xa8\x32\x1d\xdc\xa3\xd0\x35\x7b\x32\xae\x07\x74\xb4\x78\x3c\x80\x8b\xb2\xff\x82\xaf\x19\x5f\xb0\xb2\xff\x5e\x26\x7a\xa4\xb2\xdf\x0e\x67\xb1\xae\x40\x56\xcb\x17\x56\xb2\x1c\x7a\x69\x8d\xdc\x46\x8c\xca\x69\x95\xea\xac\x02\x91\x32\x17\x60\xcd\x11\x76\x38\xc4\x75\x27\x3f\xf9\xb5\xcf\x23\x46\xda\xa5\xa8\xb9\x28\xfb\x2f\xf8\x2a\xf0\x05\x2b\xfb\xef\xf7\x8c\x1e\xad\xec\x47\xc9\x29\xc4\x2a\x44\xee\xaa\x1d\x07\x4c\x32\x87\xd5\x7b\x8e\x9e\xbc\xb4\xac\x65\x8f\x86\xd2\x79\x41\x4d\x4f\xeb\xb5\xb8\xe9\x3a\x8c\xf9\x21\x27\x69\xd7\xef\x09\x9c\x57\xd9\x2f\x11\xf1\x9c\xe9\xea\x6d\x0b\x17\x65\xff\x79\xb7\xeb\xce\xab\xff\x34\xf2\xd5\xc7\xcb\xfc\x7d\xb3\x4d\x0a\xc1\x3c\xdc\x69\x72\x5f\x41\x38\xc1\x22\x1b\x86\xa5\x2c\x86\xa8\xde\x93\x93\x30\xb1\x93\x0e\x8b\xbb\xe0\x8f\xe6\x68\x53\x42\xac\xe6\x2c\x7b\xcc\x8f\xec\xef\x4c\x58\x9f\x99\x04\xde\x9b\xb9\x28\xfb\x9f\x78\x85\xaf\x23\x61\xfd\x37\xa2\xec\x3f\xf3\x7e\x3d\xf3\x23\xff\x29\xca\x7e\x1b\x1d\x1a\x21\xa7\xac\xde\x9c\x46\x68\x88\xe9\x4a\xf1\x3c\x8c\xa1\x85\x51\x95\x0c\xab\xd5\x97\x68\x9f\x30\xd2\x75\x52\x36\x4b\x90\x55\x0f\xfc\xaa\x2c\xee\x7a\xfb\xca\x45\xd9\x7f\xc1\x57\x82\x2f\x58\xd9\xff\x21\x2d\x7d\xf3\xfd\x7f\xff\xfc\xcd\xff\x06\x00\x00\xff\xff\x38\x75\xa0\x74\x6b\x91\x00\x00")

func Node_modulesKosuMigrationsSrcDeployedaddressesJsonBytes() ([]byte, error) {
	return bindataRead(
		_Node_modulesKosuMigrationsSrcDeployedaddressesJson,
		"../node_modules/@kosu/migrations/src/deployedAddresses.json",
	)
}

func Node_modulesKosuMigrationsSrcDeployedaddressesJson() (*asset, error) {
	bytes, err := Node_modulesKosuMigrationsSrcDeployedaddressesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../node_modules/@kosu/system-contracts/src/deployedAddresses.json", size: 37227, mode: os.FileMode(420), modTime: time.Unix(1569863122, 0)}

	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../node_modules/@kosu/migrations/src/deployedAddresses.json": Node_modulesKosuMigrationsSrcDeployedaddressesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"node_modules": &bintree{nil, map[string]*bintree{
			"@kosu": &bintree{nil, map[string]*bintree{
				"migrations": &bintree{nil, map[string]*bintree{
					"src": &bintree{nil, map[string]*bintree{
						"deployedAddresses.json": &bintree{Node_modulesKosuMigrationsSrcDeployedaddressesJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
