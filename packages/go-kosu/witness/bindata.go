// Package witness Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../node_modules/@kosu/system-contracts/src/deployedAddresses.json
package witness

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Node_modulesKosuSystemContractsSrcDeployedaddressesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9c\x4b\x93\x1d\xb9\x71\xef\xf7\xf3\x29\x18\x5c\xdf\x05\x90\xef\x9c\x9d\xee\x0d\x85\xae\xc3\x0e\xdb\x61\xcb\x5a\xd8\xa1\x05\x12\x99\x18\x31\x44\xb2\x15\x64\x53\x1e\x59\xa1\xef\xee\x38\xa4\x86\x8f\x3a\xd5\x64\xf5\x83\xd4\x88\x3c\xb9\x98\x69\x9e\x46\x57\x56\xe1\x00\x3f\x24\x32\xff\xa8\x3f\x7f\xf7\xe8\xd1\xa3\x47\x8f\xf1\xf1\xf7\x8f\xde\xfc\xf8\xfa\x9f\xff\xf2\x22\xeb\xc5\xaf\xc6\x75\xfd\xf7\xf8\xd3\x07\xbf\x79\xfd\xdb\x97\xd7\xe3\xfa\xd5\xcb\xc7\xdf\x3f\xea\xff\xe7\xc3\x5f\xcc\xab\xe7\xd7\x2f\xc6\xbc\xfe\x45\xe6\x8b\x7a\x79\x6a\xf1\xb8\xfd\x28\x0e\xc8\xcd\x66\x01\xce\xc6\x1c\x53\x72\x4c\x96\x99\xb4\xa2\xac\xbb\xf7\x85\x00\x34\x1f\x6f\x2f\xf6\xea\xd9\xab\xa7\xe3\xfa\xc9\x1f\xeb\x57\xe3\xe5\x7f\xbc\xac\x7c\xfc\xfd\x23\x76\xe9\x48\x9b\x86\xeb\xc5\xd5\xb3\x37\xae\xc6\x60\xa6\x6c\x93\xd7\x32\x75\x34\x5d\x13\x90\xb2\x38\x01\x6a\x36\x70\xc3\x18\x03\x74\xeb\xea\xe9\xd5\x0f\xa7\x9b\xfd\xaf\xdf\x6e\x3e\x8f\xa7\x57\xf3\xf7\xff\x7f\xbc\xfc\xdd\x9b\xcb\x2f\xa5\xe5\xbe\x9a\xa7\xf8\x12\x16\x5a\x2d\x6b\xc9\xb2\x20\x22\x48\x07\xca\x5a\xba\xb0\xcf\x26\x93\xcc\x62\x4e\x02\x53\x2d\xeb\x8d\xc3\x68\xeb\xf6\xfa\xc5\x78\xfe\x72\xcc\xeb\x27\x57\xcf\xdf\x39\x99\xd0\x80\x9d\x82\xa3\x4f\x59\x2e\xbe\xa8\x6a\x92\x15\x89\x6b\x37\x07\x9d\x1e\xcd\x78\x65\xef\xbd\xd2\x43\x20\x90\xe6\xe4\x39\x21\x01\xcf\xba\xf1\x3d\x27\xff\xf0\x3c\xeb\xc7\xc7\xdf\x3f\xda\x76\xe0\xeb\xc7\xfc\xe7\x57\xcf\xa2\x5e\x3c\xfe\xfe\x91\x00\x70\xc3\xb6\xbd\xcc\xd5\xe3\xef\x1f\x3d\x7f\xf5\xf4\xe9\x4e\xd7\xfd\xdf\xa7\x57\x3f\x7d\x03\xed\x62\xdf\xb4\x6d\x47\xdf\x8b\xab\xab\xeb\xfd\x81\xf3\xc3\xdb\x49\x4d\xda\x5d\x71\x3b\xde\x9e\x3c\xab\x97\xd7\xe3\xd9\x1f\x4e\x98\x61\x11\x40\x53\xeb\x6f\xdb\xfc\xe5\x5d\xf3\xc7\xbf\x78\x75\xfd\xbb\xab\x17\x4f\xfe\xa7\xf2\xaf\xdc\xa9\x97\xf7\x65\x56\x01\xa9\x8c\xb6\x56\xa2\x02\x2d\x97\x18\x05\x84\x62\x0e\x30\xb8\x83\x13\xbb\xeb\x5c\x47\x98\xd5\x45\x9d\xdb\x76\x3e\x3d\x1c\xb4\x3e\xf8\xf4\x64\x7f\x3e\xfb\xe4\x4d\x8f\xfe\xe9\x0f\x75\xf2\xf8\xec\xc9\xf3\xca\xcd\xc5\xde\x36\xda\x10\x4f\xa2\xcf\xa6\x1a\x0b\xc8\x19\x5b\xad\x89\x04\x42\x91\x9a\x5d\xb5\xe9\x5a\xb5\x32\x9a\x35\x94\x16\x1e\x6a\x05\x64\xd6\x4d\x60\x90\x68\x8b\x9b\xdc\xec\x93\x8f\x67\x97\x86\x68\x3a\x06\x8e\xc1\xad\x54\x99\xda\x64\xc8\x39\x8d\xb2\xb7\x5a\xe4\x3a\xa0\xc4\x68\xc1\x1c\x63\x4e\x01\xec\xe8\x7d\xc5\x9a\x76\xc0\xd9\x4f\x04\xec\xfd\xa6\xb6\x57\x7f\x78\x32\xf7\xbb\xf5\x6d\x9b\xf6\xa3\x45\xb5\xa6\x3e\x19\xbb\xb0\x77\xea\x48\x34\xb3\xaf\x6c\x83\x16\x18\x75\x27\xd7\xe5\x0a\x30\x30\xc7\x58\x85\x41\xdd\x64\x49\x08\xb1\xd6\x76\x96\x6c\xae\xfe\xc0\x73\xf0\xe0\xd5\x0f\x0f\xc3\xdd\x8b\xff\xf6\x63\xe3\x69\xb3\xb4\xe0\x0d\x6d\xc7\x03\xcc\xc0\xb7\x17\x7b\xef\x4b\xff\xa7\xab\x1f\x7e\xfa\xde\x4f\xcf\x7f\xd3\x5f\x3c\x7d\xd7\xac\xeb\x0d\x6d\x5e\xd4\xb3\xab\x3f\xbe\x9e\xd5\x6b\x3c\x7d\x59\x37\xb4\xca\x71\x3d\xde\x38\x3b\xef\xac\xbf\x7c\xf7\x91\x6e\xfb\xcc\xd3\xef\x8b\x4c\xbb\x23\xd3\xed\xc8\xb0\xf8\x7c\x11\x87\xed\x7d\x08\xb7\xbf\xce\x61\xeb\x87\x5a\x41\x6b\xb4\xfd\x6c\xf7\x56\xdf\xb7\xb3\xbf\x38\xfe\xa7\x07\xed\xd8\xcd\xdf\xee\x2f\x60\xf3\xff\xfb\xd8\x5d\x22\x0e\x04\x71\xdb\x46\xc1\x3b\x11\x87\xb5\xb6\x1b\x71\xfc\xf2\x8f\xf5\xfc\xfa\x97\xcf\x9e\x5c\x5f\xbf\x1e\xbf\xf7\x0a\x35\xba\xcc\xe8\x05\x81\x09\x30\xd4\x68\x82\x24\x54\x13\x35\x8b\xc5\xd4\x19\x91\x28\x4b\x8e\x84\x1a\x20\xec\x00\x7f\xab\xed\xd1\xe0\x66\x1d\xdc\x64\x8d\x69\xc3\xb2\x14\x47\x35\x0f\x9e\xd0\xaa\x45\x79\x36\xed\x93\x6d\x79\xac\x28\x0c\xf1\x0c\xf5\x98\x22\x11\xaa\x7c\xf6\x4d\xee\xd2\x2a\x4e\x28\xf2\x0a\x68\xad\x97\xf0\x90\x79\xda\x6e\x51\x5b\x1a\xdd\x18\x15\x7a\x36\xb1\xd1\x58\x06\x8b\x38\x19\x4d\xb2\xd6\x56\x96\x01\x72\xf6\x03\xb4\xda\x86\x6a\x7b\xb0\xe2\xcb\xf6\xe8\x62\xb7\xb7\xbb\xc0\x6a\x77\x52\xef\xc1\x0a\x64\x17\x56\xff\x78\xf5\xf2\xd5\xaf\xaf\x7e\x5f\xcf\xef\x4b\xaa\x20\x5d\xd9\x9c\x4b\xd0\x34\xd5\x46\x0b\x05\x30\xac\x3e\x62\x74\x63\x35\x6e\x12\x7c\x36\xc5\xf6\x48\x85\x82\x4a\xfc\x37\x43\x55\x21\x97\x54\xef\x2b\x4c\x5b\x21\x0d\x30\x4f\x9f\x6b\x89\xab\xc9\xc4\x31\xab\x37\x01\x2a\xd6\xe2\x31\x54\x81\xe4\xe4\x7e\xb4\x69\xbd\xd7\xb1\xc0\xaa\xb5\xde\x67\x24\xf6\xb6\x16\x0a\x6b\x43\xd0\x95\x89\x6b\x58\x06\xb0\x13\xc6\x14\x82\x98\x92\x15\x4a\xcb\x35\x95\x6b\xad\x62\xf0\x9e\x03\x8e\x04\x56\x07\x50\xa5\x17\x54\x5d\xec\xf6\x76\x27\x54\xb9\x77\x96\x23\x81\x15\xea\x2e\xab\x7e\xfd\xa2\xc6\xcb\x57\x2f\xee\x9d\x73\x0e\xa6\x2e\x35\x66\xb9\x2f\x81\xd5\x30\x45\x17\x74\x74\xb5\x46\x5c\xd4\x09\x50\xa3\xc6\xa1\xfc\x8d\x49\x93\xbe\x5d\xf0\xbf\x18\xaa\xb8\x3b\x3b\x2f\x4b\xe7\xce\x23\x42\x0c\xd0\x7c\xc2\x08\x9c\xe4\x85\xd0\x1a\x28\x75\xc7\x56\x60\x44\x8d\x70\x00\x31\x43\xc3\x68\xbd\xf8\x63\x14\x79\x2f\xaa\xea\x9a\xa3\x97\x5a\x1b\x5d\xd2\x52\x13\x70\x64\xcf\x60\x93\x29\xa8\x23\x7a\xf9\x44\x58\xd6\x1c\x1b\x21\x59\x4b\x77\xca\xea\xd5\x9c\xd2\x0f\xa0\x4a\x0e\xa0\xca\x2f\xa8\xba\xd8\xed\xed\x2e\xa8\xea\x40\xda\xe9\x08\xaa\x6c\x3f\xac\xfa\xcd\xd5\xf5\x93\xe7\x3f\xdc\x17\x54\xcd\xc3\xd7\xe8\xc0\x2d\x7c\x0c\x5d\xa5\xde\xac\x82\x04\x7d\xda\x0a\x9d\x84\x85\x31\x0f\x15\xc7\x3a\xb9\x18\x6f\xdd\x7e\x31\x50\x85\x80\x00\x81\xe1\x5a\xce\xdd\xcc\x56\x0e\x25\xe1\x3e\x9a\xb7\x68\x3e\xa5\xcf\xd6\x03\x81\xdc\xbc\x46\x8a\xaa\xcf\x61\xa7\xed\x5c\xf7\xa9\x67\x6e\x77\x41\x55\xac\x00\xa7\xfd\x23\x03\x8c\x96\x53\xd6\x2c\xe7\x91\xcd\x3a\xce\xd0\xd9\x44\xa9\xa3\xa9\x6b\x71\x10\x89\x0e\x55\x0b\x2e\x32\x58\xd6\xdb\x91\x98\x6a\x0b\xa1\x1d\x50\xd1\xb6\x93\x2f\xa0\xba\xd8\x01\xbb\x0b\xa8\xd4\x1d\xcf\x63\xf8\x73\x4e\x39\xc3\x2e\xa7\xfe\xf5\xea\xe5\x75\xbd\xf8\xb7\xfa\xe1\xc9\xcb\xeb\xfb\x07\x56\x0b\x1c\xb3\xd9\xc2\x25\x04\x99\x38\x6a\xd9\x82\xee\x06\x34\x97\x2d\x66\x2c\x24\x1d\x78\xa8\x98\x6f\x26\xb0\x7d\xb2\x2f\x86\xab\xd6\x31\x82\xa3\xe9\x08\x54\xd0\xd1\xa3\xad\xa4\x36\x39\x67\x60\x41\x82\x57\x57\x99\xbe\x4e\x9c\x62\xed\x35\x68\x61\xb5\x4e\x1c\x36\x75\x1c\x2b\xe6\xeb\x34\x80\x15\x06\x98\x83\xea\x14\xb7\x35\x95\x16\xe1\x68\x2b\x56\xab\xe1\xda\xbc\x57\x36\xc0\xc4\x0e\x54\x0d\x56\xc7\x24\xa8\x58\xc0\x73\x5b\xa6\xbb\x63\xb6\x8a\xbe\x58\x6a\xfd\x62\x5f\x93\xdd\x05\x57\xbb\x93\x7a\x0f\x57\xb2\x9f\x5a\xff\xcd\x78\xfa\x24\xc7\xf5\xd5\x83\x11\x4b\x46\x1f\x3c\x03\xa4\xa0\x59\xa1\x2e\x18\x30\x19\xd7\x9c\x52\x82\x6c\xac\x03\xc9\xf2\x50\x7e\x9d\x19\x80\xce\xa4\x0a\x7f\x1f\xa5\xfc\x35\x23\xaa\x77\x17\xe8\xa7\x8d\x64\x9f\x53\xcc\xc2\xa4\xd0\x9a\x74\x83\x80\x42\x9b\x8d\x57\x54\x61\x17\x1f\x8e\x18\x3e\x23\xb9\xeb\x9c\xbc\x25\xfa\xbb\x7b\xd9\x0d\xd3\x24\x0a\x31\x52\xdb\x12\x12\x22\xd2\x5e\xab\x77\x2f\x05\x27\x0a\x81\x59\x01\x84\x84\x6a\xd4\x0d\xfa\x98\x30\x7c\x68\xa0\xf5\xe2\x6a\x75\x8b\x52\x3e\x5f\x2a\xf9\x1b\xfb\x62\x95\x7c\xba\xa9\xef\xc7\x03\x4c\xc0\xb7\x17\xbb\x57\x25\xff\x26\xad\xc1\x17\x2e\xe4\x3f\xf0\xe4\xfb\x22\x93\xee\xc0\x64\x3b\x32\x28\xbe\xc5\x3a\xfe\x99\xdd\xa3\x8e\xff\x50\xf6\x39\xea\xf8\x6f\xcc\x8e\x77\xfa\xfb\xfd\xb0\x79\xe4\x3b\x05\x1b\x0d\xad\xd3\x36\xb3\xb8\x17\x6d\x18\xed\x46\x1b\xff\x59\x2f\xae\x7e\xf9\xe3\x6f\xe0\xdf\x5f\xc5\xff\xfb\x6b\xf0\x70\xff\x1d\xd2\xd2\xa1\x11\x27\x9f\x19\xa8\xdc\x11\x71\x9a\x33\x31\xaf\x0e\x06\xbc\x60\x79\x1e\x92\x0e\x22\xb3\xa9\x6f\x13\x12\x5f\x6c\x8b\x84\xac\x2b\x11\x8a\xb2\x2d\xc7\x1e\x49\x83\xa3\x95\xc1\xb0\x8e\xcd\xb9\x61\x77\xea\x32\x84\x81\x52\xa5\x4d\xd3\x5c\x1a\xe2\xd2\xb8\x10\x8e\x6d\x91\x8a\xb8\x0c\x58\x79\xd8\xac\xa9\x8b\x4a\xda\x4a\x8f\x29\xd9\x97\x74\x72\xac\xd3\x26\x2c\x97\x82\x0a\x3a\x54\x23\x9d\x0b\x7a\x46\x4a\x50\x3e\x14\xb5\x2e\x55\xb2\x8b\xdd\xc1\xee\x94\x7a\x56\x15\xd3\x23\xd4\x72\x7b\x47\xad\xd7\x3f\xfd\x95\x5d\x8f\xa5\x2b\xdd\xe6\xc4\xc6\x36\x1c\xf1\x29\x3e\xd6\x70\x34\x1f\xd1\xd3\x3b\x06\x96\x93\x8a\xa4\x15\xd5\x29\x32\x49\x86\xae\xa6\xd0\xa8\x6a\x16\x04\xb2\x99\x0b\x86\x7a\x3f\x2b\xf7\x6c\x26\xd4\x59\xba\x6a\xbf\x46\x67\x2b\x87\x20\xf5\x65\x6d\xc6\x28\x37\x1d\xc1\x33\x5b\xcb\x59\xdc\xa0\xb9\x16\xf6\xf3\x02\xd6\x1e\x28\x77\x25\xe4\xef\x38\x39\x19\xfa\x22\xc3\x25\x4d\x2b\xb8\x06\xa5\x04\xe4\xca\x48\xa6\xd6\x91\x94\x71\x98\xf0\xd6\xd5\x27\x34\xea\x37\x61\xf4\xc2\x88\x8b\xbd\x67\xdb\x51\x75\x63\x3c\x71\xd3\x9a\xb3\xbb\x6e\x92\xd9\x1a\xda\x63\xad\x95\xd5\x7c\xcc\x4c\x26\x61\xa5\xd3\xea\xdb\x6b\xd6\x1c\x42\x6c\x6b\x8c\x35\x1b\x3a\x62\x43\x1b\xe0\x00\xdd\x2c\x87\x7e\x6c\x71\xbe\x29\xb5\xb8\x83\x28\x06\xdc\x0d\xac\x0e\x9d\xc9\xd8\x50\x89\xd8\x19\xcb\xcd\x6a\x0c\x46\xef\x89\x32\x70\xb6\x55\x59\x36\x78\x54\xea\xaa\x16\xe1\xc1\x51\x8d\xa4\xeb\x8a\x46\x8b\xfa\x58\xd8\x02\xce\x37\x49\x1b\x2a\xd1\xf6\x71\xf6\x4f\x7e\x90\x62\x6f\x3e\x83\xfa\x54\xc5\x95\xb0\xaa\xf5\x32\x9c\x52\xdc\x91\x65\x39\x1b\x1f\x4b\x17\xed\xca\x4c\x1f\x92\x4a\xbb\x0e\x6e\x9b\x4c\x1a\x0f\xf0\xf8\xef\x86\xc8\x37\x9b\x75\x39\xfc\x6d\xde\x2a\xeb\xf2\x5e\x06\xe2\x58\x5e\x66\x3b\xca\xdf\xb6\xdb\x85\x08\xf6\x31\x7b\x34\x1e\xa3\x17\x67\x05\x9c\x10\xd2\x4b\xc7\x04\x8a\x58\xa9\xd0\x12\x2c\x53\xd2\x18\x68\xb8\x17\x2e\x30\x4c\x33\x6b\x5d\x63\x5b\x96\xde\x73\x76\x03\x4c\x3e\xbc\xff\xcf\x06\x81\xb7\x6e\xde\xcb\x09\xdd\x74\x27\x9b\x9c\xd0\x2d\x33\x3e\xe7\x8b\xfe\x2d\xf7\xf4\x0f\x25\xd8\x3f\x6c\xe7\xfb\x7b\xdb\xb9\x8b\x8f\xa6\x33\x6e\xba\xe7\xcf\x9f\xce\xd8\xb1\x07\xeb\xc0\xed\x23\xdf\xe5\x69\x3e\xcf\xa2\xff\xc0\xf3\xf5\xce\x8b\xfe\xbe\x24\xe6\xe3\xc7\x22\xb6\x67\x9b\x96\x86\xf5\xc0\x70\x29\xc0\x15\x6c\xc8\x1c\x1e\x73\x65\xd0\x08\x1f\xf0\x5a\x6e\x0c\xab\x79\xb5\xe9\x84\x54\x4d\xc8\x68\xe8\xb2\x29\x70\xd6\xc1\x5b\x0e\x6e\x83\xf5\xdd\xd5\x1e\x16\x8e\x55\x6b\x35\xef\xb4\x10\x55\x7c\xe6\x8a\x85\x6b\x2e\xd3\x36\x11\x03\x64\x62\x3f\x24\x69\xfe\xc4\xe1\x8b\xfb\xaf\xf6\xbb\x0e\x2e\x7b\x90\x8b\x1d\xb0\xcf\x83\xa3\x86\xcd\x30\x88\x3a\x34\x6f\x50\x31\xb8\x7a\xf2\xea\x6d\xac\x54\xc7\x39\x12\xaa\x46\x72\xb3\x06\x96\x3e\x78\xe8\x50\x62\x99\x36\xd1\x46\xbb\x8b\xbc\x61\x17\x47\xbe\x8b\xa3\x8f\x1c\x7c\xd8\x4a\xd7\x6c\xc5\x6c\x44\x55\x30\xa5\xcb\x18\xa0\xc8\x4b\xe7\x92\x14\x02\x5c\x6b\x2e\x5d\xde\x4c\x22\x01\x78\x02\x26\x16\x5b\x4c\x3a\x3d\xcd\x5c\x67\xc7\x01\xb6\x2c\x3a\x94\x0f\x99\xd3\xc4\xb0\x49\x4a\x37\x0b\x88\x0e\xca\x3a\x74\xa2\x83\x34\x82\xa0\xc4\x49\x05\x67\xc9\x97\x5d\x16\xed\x0a\xb1\x1f\x14\x46\xbb\x1e\x2e\x34\xba\xd8\x01\xfb\x3c\x34\x72\x69\xbd\x70\x8d\xec\x03\x3b\x38\x2e\x66\xce\xc1\x61\xe2\xdd\x17\x8a\xd6\x18\x7a\x0a\x98\x1a\x6b\xce\xe8\x85\x51\x4a\x24\x02\xce\xa3\xf5\x23\xda\xd0\x23\x34\xc2\xfd\x8c\xc8\xcd\x47\x1b\x36\x30\x82\x1e\x7d\xba\x28\x67\x4d\x3d\x45\x7b\x54\xad\xcf\xf9\xfa\xc0\xc2\x12\x95\xe9\x04\xad\x37\xf4\x0e\x99\x5d\x46\x68\x35\xb7\x21\xa3\x2a\xcc\xe5\x2c\x33\xb1\x81\x11\x1f\x4a\x83\x90\xb0\xc2\x09\x79\x90\x09\x04\x3e\x61\x76\xb4\x35\x9c\x0c\x87\x68\xd2\x02\x4f\x82\x43\x3a\xbf\x7d\xa9\xf5\x43\xc2\x68\xdf\xc3\x05\x46\x17\x3b\x60\x9f\x29\x34\x9a\xd6\xa6\x11\xa1\x8c\x46\x23\x09\x71\x6a\x83\x85\xca\x29\x36\xe6\xec\x3d\xad\xf5\x41\x5c\x21\x48\x80\x23\x34\x68\xea\x30\x66\x61\xd3\xb3\xc1\x7e\x57\x18\xdd\xee\xf0\xc2\x36\x19\x73\xb2\xa8\xe4\x62\x6e\xc0\xde\xa6\xd5\x60\xf2\x31\x67\x3b\xed\xce\x5c\x05\x57\x1a\xce\x68\x82\x1c\xe0\x66\x4d\xa4\x52\x72\x58\xd7\x75\x16\xdf\x6d\x51\x74\x68\x8f\xc6\x29\x6d\x3a\xa6\x05\x99\x18\xcc\x44\xd3\x69\x51\x5a\x4e\xd2\x43\xb4\xe6\x8a\x1a\x87\xf6\x68\xbb\x62\xea\x87\x24\xd1\xae\x83\x0b\x88\x2e\x76\xc0\x3e\x0f\x88\x0a\x5b\xab\x0a\x12\xa7\xd9\xed\x34\x69\xd6\x6a\xd8\x67\xb6\xd5\x6c\x99\xb5\x1c\xd1\x18\x7b\x57\x6d\x45\x53\x64\x94\x17\xd5\x68\x0d\x60\xce\xf1\x60\x20\xda\xdf\xa3\x7d\xea\x74\xc2\x06\x48\xbd\xb0\x80\x70\xbd\x7e\x92\xcc\x5e\x00\x2c\xcb\x66\x13\x59\x40\xb2\xa0\x82\xb3\xd2\x30\x20\xda\x5a\xe4\x04\xe0\x9c\x44\x08\x36\x64\x9d\x89\x45\xb6\x40\xda\x16\xe5\x77\x81\xa4\x25\x8c\x14\x06\x8d\xb5\x23\x90\x94\xf7\xd1\x29\x48\x20\x21\x63\x8e\x89\x95\xd5\xcf\x54\x37\x77\x38\x03\x71\x7f\x20\xed\x3a\xb8\x00\xe9\x62\x07\xec\xf3\x00\x29\xc8\x32\xa4\x53\xe5\xec\x42\x53\x48\x87\x8e\xb9\x10\xb8\xf5\x05\x60\x32\xa6\xf6\x56\x34\x8a\xfa\x14\xf5\x88\x9c\x54\xa3\xa8\xcd\x44\xc1\x8f\xbd\x7b\xe1\x36\x40\xa2\xfd\xe3\x52\x07\xce\x1f\x6c\x93\x47\x61\x5d\x41\x51\xd4\x33\xc5\x19\x18\xd1\x55\x5b\xe3\x96\x83\xd3\x17\x4b\xb9\xbb\xa0\x17\x26\x4a\x9d\xe2\x40\xec\x33\x32\x26\x4f\x8f\x4f\x31\x49\x0e\xed\xd7\xb0\xf5\x88\xd6\x6c\xc1\xb0\x81\x73\x94\x7b\x37\x25\x5c\x45\x48\x60\xcc\x1d\x1d\x54\x8f\x9d\xcb\xda\x55\x55\x3e\x28\x94\x76\x3d\xdc\xab\x70\x7d\xc7\x0e\x78\x37\x44\x2e\x85\xeb\xbf\x6d\xe1\x7a\x3b\xce\xdf\xb6\xdb\xdf\x5e\xf9\xe4\xee\x3c\x70\xa9\x2e\x13\x6b\xd6\x56\x79\x87\xd9\x7a\x86\x08\xb7\xce\xe5\x8b\xe6\x70\x19\xc8\x02\x95\x8d\xd4\x8d\x38\x50\x01\xfc\xc8\x6b\x03\x6f\x59\xb8\x7e\x60\x0c\xbc\x75\xf3\xc5\x0b\xd7\xb7\x16\x8a\xdf\xb2\xee\x7a\x7b\x21\xfa\xdd\xae\xf0\x6d\x14\xae\x3f\xb8\xe1\x9f\x6f\xe1\xfa\x81\xe7\xeb\x9d\x17\xfd\xfd\x74\xc8\xa1\x63\x00\x5b\x71\xbc\x23\x73\x2c\xe8\x82\xd3\x25\x73\x14\x59\xa4\x2f\x00\x07\xa5\x31\x27\xe3\xaa\xa6\x1e\x44\x16\x0b\x40\x5e\xa7\xa6\xa9\x61\x42\x59\x9e\xaf\x8e\x5b\x1c\x6e\xb3\x99\xfb\xaf\x8f\x00\xe1\xd2\xec\xd1\x9c\xd4\x74\x46\xc7\xae\x54\xdd\x46\x9f\xb5\x26\x75\x50\x1f\x32\x0f\xd5\x8c\xf6\x65\xc9\x0f\x9a\xa6\xdd\xf5\x70\xd9\x8c\x5c\xec\x80\x7d\x1e\x2e\x8d\x31\x33\x1a\x2b\x8d\x80\x55\x58\x99\x69\xba\x16\x85\x00\x52\xb6\x3e\x32\xa6\x8c\x5c\x85\x2d\x1d\x42\x41\xd3\x16\xcf\xce\x0b\x97\x86\x1d\x79\xf9\xed\x11\x2e\xf1\x7b\x87\xa1\xbf\x7b\xf4\xa1\xd0\x9f\xef\x23\xf4\x1f\xc2\x72\x62\x4e\x30\xf8\xa0\xa2\x4a\x06\xb7\x6e\x95\x62\xbe\x6a\x34\x91\x74\x42\x2b\x01\x69\x2c\xd9\xab\xb7\x25\x6c\x16\x33\x2b\xce\xde\x8f\xf5\x21\xa4\x2e\x32\xff\x0b\xa0\x2e\xf6\x93\x7d\xb5\x32\x7f\x04\x6b\xf6\x70\x32\x7f\x6f\x93\x69\xb9\xf8\xe8\xd4\xdb\x88\x51\xb3\x9b\xf2\x68\x73\x51\x98\xae\x41\xd2\xc7\x69\x5b\xe4\xe0\x3c\xa3\x8f\x54\x32\x6f\x11\x34\x57\x43\x3d\x03\xc5\x87\x4c\xb2\x23\x4c\xba\x88\xfc\x2f\x22\xff\xbf\xe3\x5c\x89\xdd\x26\x53\xf2\xf3\x93\xf8\x3f\x30\x00\xde\xba\xb9\x48\xfc\xcf\xec\x22\xf1\xbf\xc1\x7e\xbe\x99\x92\x9f\x81\xc4\xff\x23\x0b\xfe\xad\x24\xfe\x40\x38\xa7\x06\x90\x35\xce\x58\xa2\x02\xc9\xd9\x49\xc6\x1a\x4e\xab\x17\xc7\x60\xe9\x2d\x4a\x50\xfb\x00\xa8\x2e\x23\xc4\x95\x14\x98\xf0\x13\xc7\x8c\xb7\xaf\x45\xb8\x08\xfc\x2f\xf6\xed\xda\x57\x2b\xf0\xff\x08\x8c\x8e\x0b\xfc\xe5\x44\xcf\x82\xe5\xd2\x70\xb4\xae\x9d\xa1\x65\x51\x28\x8d\xc9\xd9\xa7\x56\x93\x22\x32\x4d\xa9\xa0\x6a\x79\xa2\x85\xcb\x58\xd3\xa4\xf8\x53\x9a\xda\x7e\xa8\x44\x7b\xd1\xf7\x5f\xec\x1b\xb1\xaf\x56\xdf\xff\x11\x18\x1d\xd6\xf7\x4f\x16\x69\x56\x53\x15\x90\x93\xb0\x2f\x18\x3d\x35\x88\xca\x6b\x85\xce\x35\x60\x09\x99\x59\xe8\xa0\x55\x52\x5d\x67\x49\xd8\x29\x32\x42\x3c\x4b\x39\x6f\x58\x74\xe8\x25\x55\x17\x79\xff\xc5\xbe\x11\xfb\x6a\xe5\xfd\x1f\x61\xd1\x41\x79\xff\x74\x77\x24\xc6\x11\xde\x20\x47\xf7\x91\xb1\x2a\x39\xc9\xa1\x88\x94\xdb\x84\x6c\x1e\x30\x1d\x5a\x5f\x38\x34\x91\x39\x27\x07\xf7\x4e\xf1\xa9\xa8\x68\xbb\x93\xb9\xa8\xfb\x2f\xf6\xed\xda\x57\xab\xee\xff\x08\x87\x6e\xa9\xee\x4f\xc4\x66\x32\x07\x2f\xb7\x18\xa3\x69\x09\xce\xb9\x8a\x7d\xf2\x70\x48\xf0\x6c\x14\xad\x70\xba\xcc\x91\x2c\xa5\xda\xb3\x73\xb5\x00\xcd\xf3\xf7\x4d\x6e\x78\x74\xe8\xb4\xd1\x45\xdc\x7f\xb1\x6f\xc2\xbe\x5a\x71\xff\xc7\xe2\xa2\x5b\x8b\xfb\x2b\xa9\x6c\x68\x64\x06\x51\xd2\x6a\xe0\x2b\xa0\x71\x93\xd9\x67\x40\x46\x44\x10\xb8\xa7\xe6\x69\x3b\xca\x40\x3d\x8a\xa7\xc2\x22\x44\x8d\x4f\xa4\xb0\xfb\x21\x91\xdf\x03\x6b\xfb\xd5\xe0\x33\x6b\xfb\x77\x3c\x5c\xb4\xfd\x0f\x3b\x5d\x0f\x5e\xfd\xe7\x51\xaf\xde\x0e\xf3\xb7\xcd\xf6\x43\x1a\x03\x59\x73\xa6\xca\x94\x04\xab\xb4\xa4\x55\xe1\x2e\x4a\x73\x75\x4a\xb1\x1e\xab\x74\xb5\x25\xad\x77\x33\x61\x4f\x18\x33\xbd\x68\xe5\xd9\x19\xbf\x3d\x67\xb7\x2c\x58\x3f\x30\x04\xde\xba\xb9\x48\xfb\xef\x78\x85\x6f\xa3\x60\xfd\x77\x22\xed\x7f\xe0\xf9\xfa\xc0\x4b\xfe\x5d\xa4\xfd\x1d\x15\xd7\x69\xc9\x59\x2a\x35\x4a\x24\xd5\x9a\x24\xfa\x68\xc6\x0d\x13\x1c\xd7\x12\x08\x1e\xa8\x39\x6d\x10\xcc\x35\x04\xd3\x3b\x58\x5a\x9e\x95\xe0\x37\x34\xdc\xbe\x8e\xfe\xa2\xec\xbf\xd8\xb7\x6c\x5f\xad\xb2\x7f\x8b\xa5\xef\xde\xfc\xf7\x2f\xdf\xfd\x6f\x00\x00\x00\xff\xff\xe2\x6c\x23\x92\x75\x91\x00\x00")

func Node_modulesKosuSystemContractsSrcDeployedaddressesJsonBytes() ([]byte, error) {
	return bindataRead(
		_Node_modulesKosuSystemContractsSrcDeployedaddressesJson,
		"../node_modules/@kosu/system-contracts/src/deployedAddresses.json",
	)
}

func Node_modulesKosuSystemContractsSrcDeployedaddressesJson() (*asset, error) {
	bytes, err := Node_modulesKosuSystemContractsSrcDeployedaddressesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../node_modules/@kosu/system-contracts/src/deployedAddresses.json", size: 37237, mode: os.FileMode(420), modTime: time.Unix(1566328086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../node_modules/@kosu/system-contracts/src/deployedAddresses.json": Node_modulesKosuSystemContractsSrcDeployedaddressesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"node_modules": &bintree{nil, map[string]*bintree{
			"@kosu": &bintree{nil, map[string]*bintree{
				"system-contracts": &bintree{nil, map[string]*bintree{
					"src": &bintree{nil, map[string]*bintree{
						"deployedAddresses.json": &bintree{Node_modulesKosuSystemContractsSrcDeployedaddressesJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
