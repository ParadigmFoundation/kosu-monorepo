// Package witness Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../node_modules/@kosu/system-contracts/src/deployedAddresses.json
package witness

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Node_modulesKosuSystemContractsSrcDeployedaddressesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9c\x4d\x8f\x5c\xc9\x71\xae\xf7\xf3\x2b\x08\xae\xef\x22\xe3\x2b\x23\x62\x76\xba\x17\x82\xee\xc5\x35\x6c\xc3\x96\xb5\xb0\xa1\x45\x44\x46\xe4\x88\x10\xc9\x16\xc8\xa6\x3c\xb2\xa0\xff\x6e\xf4\x7c\x70\x86\x55\xa7\x9b\x35\x64\xf7\x0c\x60\xd5\xbb\x61\xb3\x2a\x3b\xe3\x54\x56\xe6\x93\x91\x71\xde\xd3\x7f\xfd\xe2\xd9\xb3\x67\xcf\x9e\xd3\xf3\x2f\x9f\x7d\xfb\xe3\x37\xff\xfd\xa7\x37\xd5\x6f\x7e\x13\xb7\xfd\x9f\xf1\x97\x0f\xde\xf9\xe6\xdd\xb7\xb7\x71\xfb\xee\xed\xf3\x2f\x9f\xc1\xff\xfa\xf0\x8d\x75\xf3\xfa\xf6\x4d\xac\xdb\x5f\x55\xbd\xe9\xb7\x77\x2d\x9e\x8f\xaf\x6d\xd9\x9a\x32\x82\x53\x9d\x27\x12\x0f\x24\xd1\xda\xe6\x32\x51\x6d\x0b\x11\xf5\x18\xf8\xfc\xb4\xb3\x77\xaf\xde\xbd\x8c\xdb\x17\x7f\xee\xdf\xc4\xdb\x7f\x7b\xdb\x75\x17\xd0\x48\x95\xf8\xa4\xe5\x7e\x73\xf3\xea\xdb\x58\x11\x22\x5c\x63\xc9\xde\xa6\x4e\xa6\x7b\x21\x71\xb5\x14\x62\xaf\x81\x6e\x94\x11\xa8\xa7\xb1\x5e\xde\x7c\x75\x77\xb5\xff\xf1\xfb\x93\xd7\xf3\xe5\xcd\xfa\xe3\xff\x8d\xb7\x7f\xf8\xb6\x7b\xb7\xb1\x94\x77\x4d\xaf\xee\x95\x83\x76\x40\x29\x33\xb9\xee\xc9\x1c\x3a\x72\x87\x8f\x8a\xa2\xdd\x11\x43\xb8\x85\xc9\xa4\xb4\x02\x64\x8e\xd3\xb0\xb7\x6f\xe2\xf5\xdb\x58\xb7\x2f\x6e\x5e\xff\x10\x24\x97\xa1\x6d\x47\xe5\x58\x7b\xb0\xcd\x91\xb9\x31\x69\x6c\x2b\x4c\x85\x05\xb5\x33\x03\x2a\x93\x94\x2c\x76\xaf\x72\x12\x48\x03\xc6\xa2\x7c\x20\xc8\xff\x7b\x5d\xfd\xf5\xdd\x30\x8e\xa3\xcf\xf9\x8f\xef\x5e\x65\xbf\x79\xfe\xe5\xb3\x39\xdc\x5d\xe5\xb4\x9f\x9b\xe7\x5f\x3e\x7b\xfd\xee\xe5\xcb\x83\xb1\xfb\xdf\x2f\x6f\xbe\xff\x0a\xc6\x55\x7f\xd7\x3a\x9d\x7e\x6f\x6e\x6e\x6e\x8f\x27\xce\x57\xef\x97\x35\x2b\xb8\xd2\xe9\x7c\x7b\xf1\xaa\xdf\xde\xc6\xab\x3f\xdd\x4d\x58\x99\x2c\xee\xe0\xfe\xbe\xcd\xdf\x7e\x68\xfe\xfc\x57\xef\x6e\xff\x70\xf3\xe6\xc5\x7f\x75\x7d\x47\x9e\x7e\xfb\xb9\xd4\x12\x34\x68\x29\x03\xa4\x16\x37\xd1\x72\x0f\xb5\x95\xab\x7d\xae\x81\x30\x90\x57\xf3\xbc\x84\x5a\x73\x0e\x53\x7f\x32\x68\x7d\xf0\xea\x9d\xfe\x7a\xf6\xca\xb7\x03\xfa\x97\x3f\xf5\x5d\xc4\x57\x2f\x5e\x77\x9d\x74\xf6\xbe\xd1\x09\xf1\xa0\xd1\x6a\x2d\x4b\xc3\x4d\xce\x19\x0c\xbd\x8c\x64\xe1\x84\xc5\x86\x01\x31\x46\x8d\x92\x22\x44\xc5\x02\xd7\x09\x39\x56\xc6\xda\x35\x94\xee\x0b\x73\x4c\x3e\xc2\x21\x5c\xbe\x00\x3d\x4a\x24\x96\xca\x34\x52\x1c\xa5\x3c\x63\x19\x60\xc3\x5c\xbc\xd7\x1c\x23\x00\x2b\xd7\x08\xe4\x8c\x9c\x6d\xb8\x4f\xc9\x77\x14\xec\x7b\x02\xf2\x7d\x4d\x6f\xfe\xf4\x62\x1d\x8f\xea\xfb\x36\xe3\x6b\xcb\x1e\x43\x7d\x09\xc1\x14\x07\x06\x62\x5e\x05\xbb\x46\xf0\x46\x63\x70\x76\xdd\xae\x88\x41\x15\xb1\x9b\x92\xc1\xe6\x9e\x39\x59\xb4\x4f\xd7\xc8\x49\xef\x8f\xbc\x02\x2f\xec\xfd\xe2\x59\x78\xd8\xf9\xef\x1f\x9a\x4e\x27\x1b\x8b\xdd\xd3\x36\x1e\x61\xfd\xbd\xef\xec\x47\xdf\xf9\x3f\xdc\x7c\xf5\xfd\xd7\x7e\xf7\xf9\xef\xfb\x8d\x97\x3f\x34\xa3\x7b\x9a\xbc\xe9\x57\x37\x7f\xfe\x66\x49\xef\x78\xf9\xb6\xef\x69\x55\x71\x1b\xdf\xc6\x3a\x1f\xab\xbf\x7d\xf1\xc0\xa8\x3d\xf1\xe2\xfb\x59\x16\xdd\x05\x8b\xed\x92\x49\xf1\x74\xd9\x86\x1d\xbd\x88\x3f\xbd\x9f\x8b\x05\xdf\xfd\xcb\x0f\xb6\x3a\xba\x82\xc3\x4b\xfd\xb1\x1e\xee\xf2\x31\x04\xf7\xbc\x7e\xff\xa5\xdd\xf7\x1b\xe7\x7a\x8c\x41\xff\x94\x6c\x83\x70\xba\x9d\xce\xc9\x83\x6c\x03\x65\x1e\x66\x1b\xbf\xfe\x73\xbf\xbe\xfd\xf5\xab\x17\xb7\xb7\xdf\xcc\xdf\xcf\x4b\x33\x7a\x44\x0c\xad\xad\xb3\xd8\x07\xe9\x9c\x5d\x1b\x3d\x16\x8a\x6b\x75\xf9\x08\x5f\x15\x97\xa4\x19\xe6\x48\x76\x9a\x45\xfd\x6c\x67\x23\xf6\xa4\x5a\xba\x26\x92\x4c\x61\x9c\x64\xe5\x38\xbd\x7c\x25\x24\xc8\xa0\x39\xf6\xde\xa4\x51\xc5\xc5\xb8\x13\x36\x4e\xd0\x5d\x73\x02\x4e\xb9\x08\x56\x31\x27\x28\xec\xdc\xd2\x6b\xf4\x28\x60\x4c\xc6\x39\x35\x6c\xa1\xad\xb2\xd9\xb9\x1a\x84\x5c\x0a\xc7\x24\x8a\xb9\x7b\xd2\xdc\xc1\x32\x08\xf6\x05\xb0\x3a\x1d\xc0\x03\x58\xd9\xe9\xf1\xe9\x7a\x34\xba\xea\x02\x7d\x0a\xac\x70\x8a\x23\x5e\x00\x2b\xc5\x43\x58\xfd\xff\x9b\xb7\xef\x7e\x7b\xf3\xc7\x7e\xfd\xb9\xa4\xba\xdb\xa4\x07\xd1\x5c\x43\x2d\x25\x3b\xf7\x56\x53\xad\x91\x0e\xe6\xa4\x91\xad\x36\xe9\x2c\xe9\x38\x22\x15\xd1\x1c\xc3\xe6\x2f\x85\xaa\x9a\x85\x77\xf9\xd1\xc4\x1d\x43\x11\x37\x90\xc9\x96\xa5\x13\xf6\x68\xf1\x9d\xba\xba\x99\x6a\x84\x15\x32\x59\x80\x36\x6d\x5a\x60\x35\x41\xfa\x22\x54\x2d\xb1\x68\x14\x83\xc6\xc9\x59\xb2\x90\x84\x63\x88\x5b\x89\x27\x29\x72\x50\x89\xaf\x06\xe7\x60\x45\x08\x2b\x2b\x28\xc0\x44\xeb\x7c\x28\xc8\xf7\xa8\x3a\xad\xd0\x1c\xa1\xea\x6c\x9f\xbb\xa2\xea\xaa\x8f\xeb\x93\x50\xe5\x76\x07\xa2\x8f\xb3\x8a\xc6\x71\x62\xf5\xdb\x37\x1d\x6f\xdf\xbd\xf9\xfc\x8a\x33\xe5\x86\x61\xbc\x18\x37\x36\xc1\x88\x39\x78\xcc\x80\xb2\x1c\x2d\x60\x85\x73\xb3\x9f\xe1\xe3\xb0\xe2\xcc\xc3\x64\xfe\x62\x59\x95\x40\xa1\x10\x50\xad\x70\xe4\x5e\x3e\x94\x97\x63\xe2\xa4\x61\xa5\xb5\xb3\x86\xd1\x64\xd7\xc1\x5b\x08\x66\xb1\x52\x95\xd1\xf4\xbb\x03\xe3\x59\xde\x78\x88\x2a\x61\x9e\x3d\xaa\x5c\x37\xc5\xd0\xc0\x59\xbd\x0a\x6b\xae\x88\xd6\x1e\xcc\x38\xb4\xa5\xb7\xa2\x2d\xf5\x98\x90\x64\x35\x71\xea\x5c\xb2\xf1\xa1\x73\xe6\xfb\x8a\xf3\x05\xa8\x3a\xdd\x0f\xae\xa8\xba\xea\x02\x7d\x0a\xaa\x00\x59\x81\x2f\x38\x03\x12\x1f\xa3\xea\x77\x37\xb7\x2f\x5e\x7f\xf5\xb9\xa0\x2a\x07\x50\x29\xe4\x42\xd9\x8b\x62\x52\xd8\x8e\xf2\x68\xf6\x98\xbd\xc9\xa0\x48\xfb\xa2\x9c\x0a\x58\x10\xe8\xe9\xaa\xcc\x1f\xcb\xa9\xca\x4b\x1b\x6d\x23\xe6\xa8\x0a\x24\x18\xca\xbd\x9b\x42\xa1\x75\x32\xc9\x2e\x93\x09\x8a\x69\x2b\x71\x51\x34\xc6\xf0\xa9\x69\x30\xce\xeb\xe8\x87\xa0\x22\xab\x41\xb1\x3c\x06\xbb\xea\x30\x4f\xa8\x2d\x16\x5c\x3e\xac\x01\x16\x0c\xd9\x7b\xed\x65\x1d\x35\xd7\x80\x79\xd7\x76\xa6\xc0\xc2\x5c\x7c\x49\xad\xea\x92\x9c\xea\x67\xab\x55\x5d\xf5\x3f\x49\x9f\x02\x2a\xbd\x3b\xd9\x5d\x70\x67\x8c\xf4\xf8\xce\xd8\x3f\xdf\xbc\xbd\xed\x37\xff\xd2\x5f\xbd\x78\x7b\xfb\xf9\x89\x15\x91\x2f\x43\x96\xd8\x33\x20\x13\x69\xa5\xa0\x84\x2d\xca\x41\x93\x5c\xe7\xe8\x35\xc6\x45\x37\xc5\x10\x14\x44\x4e\x97\xdb\xcf\xc6\x2b\x9a\x93\x7d\x93\xa1\x78\x47\x42\x41\x56\x18\x1a\x0c\x9a\x7b\x46\x45\xba\x21\x31\x40\x9b\x81\x87\x4e\x49\x9a\x88\x3b\xb8\x20\x27\xe0\x65\xe5\x2a\x8b\x3d\x0a\x31\x45\x95\x16\x37\x70\x9b\x4e\xa9\x11\x3c\xb9\x34\x64\xe0\xe6\x39\x5a\xbd\xdc\x65\x39\xda\xec\x66\xac\xee\x92\x68\x42\xb8\x80\x57\xa7\x49\xd3\x01\xaf\xfc\x5a\xae\xba\xea\x13\xf4\x29\xbc\x12\x3b\x38\x2d\x1d\xf0\x8a\x27\x1f\xe7\x55\xf1\xf2\x45\xc5\xed\xcd\xa3\x21\xcb\x21\xf4\x2e\x85\x9a\x81\x6b\x97\xe8\x56\x1d\xae\xb0\x34\xdb\x8b\xa8\xb8\xd5\x47\xd7\x45\x29\x16\x93\x03\x80\xfe\x52\xc8\x0a\xcf\x39\xb9\x7a\x98\xf1\xe6\x18\x82\xbe\xa6\xc5\x56\xf5\x91\xce\x58\x49\x69\x4d\xdb\x30\xab\x76\x21\xa8\xd8\x26\x58\x28\x9d\x08\xfc\x50\xf1\xfb\x87\x20\xc8\xd1\x35\xb9\xdc\x71\x4c\x53\xdc\x6a\x26\x4b\x96\x62\x08\xed\xa5\x84\x8e\x63\x4f\x2b\xed\xa6\x65\x73\x2c\x6c\x68\xdf\x8d\x2e\x91\x75\xea\x2b\x38\x42\xd6\x05\xe6\xa3\xf3\x2a\xc2\x15\x59\x57\x7d\x5c\x9f\x64\x3e\x3a\x5c\xd5\x87\xcc\x3a\xce\xb1\xfe\xbd\xdf\xdc\xfc\xfa\xeb\xdf\xe1\xbf\xbe\xcb\xff\xf3\x1d\x82\x3e\x97\x5a\x6d\x42\x4b\x2c\x4a\xa1\x60\x44\x9b\xac\x9c\x92\x7b\xb5\xea\xd0\x0d\xd0\x24\xd6\x76\x76\xa0\x39\x4c\xb4\xbe\xb9\xdd\xf9\x8b\x55\xb0\x26\x4c\x2c\x08\xce\x29\xc1\xbc\x11\x61\x86\xfa\x9a\x3b\x7a\x51\xac\xd8\x46\x9b\x27\x8a\xc6\x1c\x81\xbc\x46\x13\xcf\xa2\xc6\x29\x8b\x52\x2e\x4b\xb4\x88\x59\xd8\xe6\xac\xc5\x0b\x3d\x45\x99\x24\x18\x39\x24\xf6\x86\x3b\x52\x72\x16\xdb\xf0\x10\x77\x05\x1f\xbc\x59\x32\x71\x08\x61\xe1\x83\xc6\xcc\x9f\x50\xc1\xf2\x6b\xb1\xfd\xaa\x4f\xd0\x27\x55\xb0\x54\xa7\xc1\x05\xc5\x76\x36\xf8\x81\x5a\xdf\xfc\xf4\x1d\xbb\x9e\x4f\x50\xfe\x29\xb6\xef\xb3\x74\x44\x2c\x70\x23\x75\x32\x62\x25\xe7\xea\x1c\x45\x73\x30\x80\xbb\xd6\x0a\xe4\x91\x4b\x1a\x13\xa6\xa7\xef\xa8\x96\x9e\xad\x8c\xb6\xe4\x2c\xe3\xfa\x70\x41\x9d\xf2\xf8\x10\x93\x69\xbb\x62\x12\xc3\xb6\xb1\x32\xda\x4d\x23\x65\xd5\x18\xb5\x5a\x06\x0e\xd7\x26\x90\x8b\xac\xe5\x87\x1e\xd4\x1f\x28\xb9\x04\x61\xb3\xd1\x9e\x43\x3b\xa5\x83\x6b\x26\xd6\xae\x2c\xe1\x01\xc4\x2a\x14\x76\x6e\x63\xf8\x88\xc9\xf5\x3e\x88\x5e\x09\x71\xd5\x8f\x74\x3a\xab\xee\xcd\x26\xee\xdb\x71\x8e\xad\x7f\x89\x73\xcb\xa2\x85\xde\x89\x1b\x5b\x61\xb5\xda\x56\x59\xea\x8b\x53\xa3\x08\x15\x32\xbd\xdc\x6c\x73\xd6\xb0\xed\x1c\x7b\x97\xdb\x5a\x97\xec\x9a\x67\xa5\x87\x33\x40\xb1\x0e\x3a\x4c\xab\x2e\x32\x75\x9f\x9a\x90\x20\x05\x36\x7b\x1a\x17\x0c\x4a\x75\x44\x94\xa9\x7b\xb8\x91\x3b\x7b\x09\x63\x56\xae\x9d\xb0\x92\xad\x16\x8b\x69\xa0\xc7\x16\x71\x3e\x5b\xbd\x1f\x32\xe9\xb4\xb8\x7e\x9c\xba\xb1\x12\x0c\x5f\xc9\xb0\x54\x69\x17\xee\x1e\xd0\x46\x6b\xb6\x00\xc9\xdc\x2e\x26\x75\x51\x8d\xec\xd0\xa9\xf6\x98\x4c\x3a\x0c\xf0\x53\x7d\xe5\xf1\x08\x1f\xff\x87\x09\xf2\x77\x6b\xc0\xbe\xf8\xdb\x3c\xec\xfc\x3e\x03\xf6\x8f\xcc\xc8\xf7\xb4\x78\x70\x8e\xbf\x6f\x75\x08\x90\x29\x4a\x4a\x80\x1b\x72\xb0\x90\xcc\x14\x36\x9f\x36\x5c\xc7\x60\xc6\x3d\xa4\x7d\x83\xc8\x92\x69\x93\xb2\xa3\xbd\x26\x0d\xfa\xe6\xfe\x8f\x9d\x4e\xcc\xa3\x60\xf7\x80\xe4\xc3\xab\x7f\x32\x00\xbc\x0f\xf3\x23\x73\xf8\x7d\x57\x72\x62\x0e\x3f\x6b\xf4\xb0\xf5\xfb\x7c\xc3\xff\x89\xe6\xde\x8f\x9a\x85\x1f\x5b\xe7\x46\x5f\x3b\xb8\x8a\x07\x7d\xcd\xf7\x5d\xf3\xd3\xfb\x9a\x0f\xf4\x68\x03\x78\xfa\x91\x3f\xe5\xd3\x3c\xcd\x86\xff\xc8\xeb\xf5\x93\x37\x7c\x39\xdc\xf0\x1f\xf6\x55\x9f\x2c\x74\xac\x2d\xd5\xa8\x28\xa3\x65\xf5\xc8\xb9\x6d\x51\x38\x55\x12\xf5\xd8\x32\x2c\xc8\x49\x5c\x2a\x22\x91\xa5\x78\x04\x8c\x40\xc9\x61\x0b\xfc\xe1\x9d\x1e\x2e\xaa\xd2\xe0\xa6\xd8\xbd\xf7\x70\xe0\x4d\xa4\xd3\x57\xed\xdc\xb4\xd7\x36\x1d\x8b\x28\x71\x2e\x82\xb3\xdb\x38\x87\x55\x9a\x23\x9f\xe7\x63\x6e\xf5\x87\x01\xae\xc7\x8f\xab\x2e\xd0\x13\x1d\x3f\x54\xda\x83\x16\x99\x2b\xe4\xb0\xb4\x15\x85\xd8\x1d\x96\xca\xab\x4b\xba\xb7\x1b\xb6\x4d\x23\x44\x6c\x86\xd1\x59\xb0\x14\xc1\x56\x5e\xe2\xe6\xb8\x88\x46\x7a\x48\xa3\x07\x8c\xd3\x27\x28\x4a\x5a\x73\xa8\x07\xe8\x04\x23\xd1\xb5\xcd\x84\xc2\xd7\x08\xdf\x06\xed\x12\x0b\x2d\x2c\x7d\x7b\x00\x99\xaa\x4c\x18\xb8\x97\xd8\xb2\xe9\xeb\x23\x28\x3a\x4d\xcf\x0f\x51\xb4\xd6\xdd\x20\x8d\x59\x13\xcc\x12\x13\x50\x45\x43\x17\x39\xce\xc1\x98\x5c\xb4\xb8\xf1\x0c\x7b\x87\x28\x3a\xf4\x71\x3e\x2a\x8b\x0e\x23\x5c\x61\x74\xd5\x05\x7a\x1a\x18\xd1\x1a\x4e\x43\x55\x68\x69\x53\x99\x13\x5b\x72\x8e\x0d\x4d\x0a\x5b\xe7\x28\x10\xf7\x9d\xd2\xb0\x0d\xbc\xcc\x39\x60\xc5\x92\xc2\x2d\x70\xb6\x88\x3f\x11\x46\x30\x0e\x61\x74\xbf\x33\xfa\xf4\x2f\x54\x68\x39\x01\x52\xd0\x50\xec\x60\x8c\x95\x02\x3c\x51\x56\xc8\x22\x4c\x69\x56\xd6\xd9\x1a\x33\x4d\x05\xe6\x8a\x15\x5b\x29\x5d\x9a\x90\x3f\xc2\xa2\x8b\xaa\xb2\x3c\x45\x71\xfb\x30\xac\x42\x46\x5f\xb8\x80\x6c\x87\xb3\x51\x4c\x2d\xde\xe8\xc5\xe7\xb6\xe1\x43\x57\xe3\xa1\x51\xf3\x31\x59\x74\x1c\xe1\xca\xa2\xab\x2e\xd0\x13\xb1\x28\x15\x31\x75\xcc\xe8\x82\x74\xf3\xad\x29\xbc\x97\xee\x10\x98\x91\x66\xbd\x57\x62\x46\x26\xa8\xfa\x8e\x3d\x04\xda\x7d\xcf\x55\x9d\xfd\x68\x2c\x3a\xae\xcb\xde\x67\x7d\x3e\x21\x51\x17\xf0\x5c\x5b\x57\x8f\x88\x48\x50\x8c\x61\x56\x6b\xc3\x68\x69\xc5\x09\x3b\x7c\x66\x4c\x86\x54\x72\xc3\xdc\x60\xdb\xc9\x91\x5d\x76\x9c\xdd\x6e\x3e\x21\xd1\x45\xb5\x58\xa9\x39\x96\x53\x59\xb2\x4d\xc3\x55\x64\xba\x2c\x5b\xdb\x79\x42\x4e\xed\xb5\xb3\xe3\xa2\x03\xda\xa1\x13\xf3\x31\x41\x74\x18\xe0\xca\xa1\xab\x2e\xd0\xd3\x70\x68\x69\x51\x6f\xa0\x99\x31\x16\xcf\x31\xa9\xcd\x4a\x6a\xde\x9d\x62\xc2\xf6\xdc\x40\x77\xc7\xb5\x58\x3c\x46\x06\xdf\x2d\x32\xe8\xad\x59\x23\x75\xd4\x63\x95\x8b\xe0\xb8\x5c\xf4\x31\x6b\xf3\x09\x8f\x74\xe6\x46\x0f\x71\xf4\x34\xf6\xed\x38\x80\x95\x49\x32\xbd\xba\x11\x40\x89\x46\x17\xec\x90\xd2\x74\x0a\xb5\x3d\x1d\xad\xa3\x7b\xfa\xd9\xfd\x9a\x0f\x79\x84\x17\x15\x8c\xb4\xa7\x10\xa7\xe1\x10\x05\x42\x9e\xed\x10\xc0\xc9\x13\x0b\x2b\x57\x2c\xea\x6a\xb8\xe8\xc1\xb4\x43\xa7\xe5\x63\xf2\xe8\x30\xc0\x95\x47\x57\x5d\xa0\xa7\xe1\x51\x27\xe9\x4e\x48\xc4\xf2\x40\x2a\xd1\x0d\x23\x85\xbd\x85\x13\xc1\x88\x03\xdb\x84\x43\x12\x91\x09\x7a\xa4\xec\x20\xe4\x2d\x3c\xf1\xdc\xc1\xf6\xa9\x3c\x3a\x2e\x18\x5d\x60\x5d\x3e\xb5\xc6\x59\xf7\x1e\x1d\x32\x28\x72\x2c\xdd\xab\x80\xd3\x07\xc0\x76\xa8\x29\x98\xa1\xb3\xe7\x24\xca\x48\x42\x46\x2c\xae\x85\xbb\xc6\x6a\x5f\xe3\xcc\xd0\x7b\x82\xa4\xd3\xb5\x7b\xfc\x48\xc7\x80\xcc\x31\x6c\x63\x58\xd0\x8a\x76\x07\x53\xa6\xdd\x4c\x8c\x26\x02\xe4\xa8\xe7\x7f\x4b\xe8\x1e\x7f\xf4\x98\xf3\xfe\x47\xd0\x1e\xc1\x43\x73\x18\xe1\x0a\xa5\xab\x2e\xd0\xd3\x40\x09\xb7\x8a\xae\xdc\x52\x90\x39\x91\x19\xcd\x73\xec\x06\xf1\x70\x59\xd2\x09\x59\x7b\x6a\x12\x7b\xc9\x0a\xc1\x11\xab\xcb\x97\x09\xc8\x96\x4b\x9e\xf1\xb9\x08\x4a\x9f\xe1\x4d\x3e\xcd\x94\x52\x45\xe6\x5d\x8e\x32\xb7\x65\xca\xde\xc3\x83\x8b\xc7\x06\xf5\x8d\x3a\x6d\x6a\x4a\xb7\xec\x39\x70\x54\x03\x41\x6d\xf3\x65\x39\x28\x17\x9e\x3d\x73\x7e\x82\xa5\xd3\x47\xbe\x0e\xb1\x34\x70\x4a\x6b\x41\x0e\x67\x35\x5d\x09\x04\xca\x0d\x16\xb0\x7a\x2f\x06\x54\x8f\xb9\x2e\xaa\x67\x1f\x5b\x25\x1f\xb5\x86\x74\x18\xe1\x8a\xa5\xab\x2e\xd0\xd3\x60\x49\x61\x17\x0c\x52\x8e\xb1\x6d\x24\x29\x66\x36\x97\x97\x8c\xd8\xdb\x53\x83\x45\x2d\x17\x65\xe7\x1d\xb9\x48\x55\x6d\xc9\xa4\xb1\x48\x08\x1e\xeb\xe6\x1a\x9e\x99\x8f\xbf\xf8\xdb\x17\xff\x1d\x00\x00\xff\xff\x98\xf0\x85\xcb\x74\x5a\x00\x00")

func Node_modulesKosuSystemContractsSrcDeployedaddressesJsonBytes() ([]byte, error) {
	return bindataRead(
		_Node_modulesKosuSystemContractsSrcDeployedaddressesJson,
		"../node_modules/@kosu/system-contracts/src/deployedAddresses.json",
	)
}

func Node_modulesKosuSystemContractsSrcDeployedaddressesJson() (*asset, error) {
	bytes, err := Node_modulesKosuSystemContractsSrcDeployedaddressesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../node_modules/@kosu/system-contracts/src/deployedAddresses.json", size: 23156, mode: os.FileMode(420), modTime: time.Unix(1564606263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../node_modules/@kosu/system-contracts/src/deployedAddresses.json": Node_modulesKosuSystemContractsSrcDeployedaddressesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"node_modules": &bintree{nil, map[string]*bintree{
			"@kosu": &bintree{nil, map[string]*bintree{
				"system-contracts": &bintree{nil, map[string]*bintree{
					"src": &bintree{nil, map[string]*bintree{
						"deployedAddresses.json": &bintree{Node_modulesKosuSystemContractsSrcDeployedaddressesJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
