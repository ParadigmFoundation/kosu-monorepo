// Package witness Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../node_modules/@kosu/system-contracts/src/deployedAddresses.json
package witness

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Node_modulesKosuSystemContractsSrcDeployedaddressesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x3f\x6f\x9c\x45\x10\xc6\x7b\x7f\x8a\xd3\xd5\x14\xf3\x6f\x67\x66\xd3\x45\xc8\xa2\xa0\x20\x82\x28\x05\xdd\xee\xec\x4c\xb0\x00\x9f\xf4\xde\x6b\x30\xa0\x7c\x77\xe4\x9c\x11\x36\x92\x71\xba\xdd\x62\x7e\x9a\x67\x9f\xdf\xfe\x75\x75\x38\x1c\x0e\x47\x3e\xbe\x39\x5c\x8e\x9f\xaf\xdf\x6d\x2b\xb7\x6f\xc6\x9e\xbf\x8f\x3f\x8e\x6f\x0e\x47\xb8\x47\x30\xa3\x80\x66\xd2\x71\x51\x21\x96\xe6\xe2\x89\xa8\xcb\x56\x70\x84\x23\xb7\x24\x39\x7e\xf5\x2f\xe5\xed\xdd\xfe\xd3\x69\xbb\xf9\x33\xd7\xdb\xb5\xb6\x3c\x9f\xf3\x7c\x81\x99\x71\x81\x1b\xa5\x03\xaf\xf2\x99\x0a\xdc\x43\x79\x98\xad\x46\x40\xd4\x41\xe7\x02\x7d\x0a\xbb\xfe\x2d\x6f\xf7\xeb\x5f\x6f\xf6\x3d\xb7\x0b\xa5\xc3\x88\x2a\xb5\xe9\x4c\xa3\x56\x2d\xeb\xec\x03\x66\x20\x76\x5a\x01\x5e\x1a\x26\x94\x4f\x29\xdf\x9e\xce\x77\xef\x4f\x3f\xe7\xed\x05\xe1\x00\xa5\x48\x83\x5b\xb5\xa0\x4c\x5f\x49\x5a\xd5\xbb\x73\x4c\x93\x39\x34\x3a\xf5\xf1\x2c\xd5\xfb\x2d\xc7\xf9\x6e\x7b\x7c\x97\x32\x36\xc3\x66\x81\x8e\x31\xa4\x75\x91\x4e\x22\x22\x11\x9e\x21\xce\x44\x0a\xb4\xe2\x29\xe1\xc3\x69\xbf\xb9\xfd\x78\x99\x0f\x98\x03\xc7\x74\x73\x0c\x62\x09\x99\x20\xa0\x38\xa7\x0a\xa2\x3a\x08\x52\x04\x8d\xf5\x74\xfe\xdd\xe9\xbc\xe7\xf6\x7d\x7e\xbc\x39\xef\xff\xec\x11\x84\x6b\xce\x2c\xe7\xaa\x05\xc5\xc1\x6c\x43\x55\x35\x4c\x95\xcb\x13\xa7\x99\x75\x7f\x99\xf3\x6e\x3b\xdd\x3f\xc2\x3c\x9a\x63\xae\x06\x36\x2c\x5c\x18\x48\xa3\x40\x62\x10\x72\x13\x9a\x66\x43\x06\x77\x7b\x16\x6a\xfc\x72\xb3\xc6\x7e\xfa\xcf\x5e\x55\x26\x6b\x0d\x53\xf0\x26\xc1\xfa\xd0\x73\x19\xf9\x18\x82\xd6\xa7\x4f\x00\x28\x26\x3a\x7e\x26\x7d\xba\x00\x8f\x8a\x26\xaf\x19\x39\xbd\xd6\x50\x16\x2c\x87\x98\x23\xbb\xdb\x98\x2d\x16\xc0\x8a\x6c\x40\xd0\x2d\x19\x1b\x7d\x91\x91\x29\xc6\x08\x3d\xa6\x60\x3c\xd8\xb9\xa8\x12\x30\x9d\x43\xb3\x21\x37\xad\xde\xbc\xad\x57\x8c\xa4\xe2\x51\x59\x05\x1d\xa5\x98\x4d\x7b\xac\x9a\xc5\x15\xe5\x06\xc1\x3c\x49\x83\x11\xff\xc7\xc8\x08\x57\x67\xd0\xa5\xe8\x3e\x69\x22\x59\x7b\x68\x81\x3b\x29\x08\x4d\x59\x1c\x92\xd4\x5f\x36\x52\xb4\x19\x55\x07\xa7\xb5\x48\xa8\x07\x05\xb2\xd7\xe8\xe2\x3c\xd4\x96\x14\xf5\x25\xc4\x2f\x19\xd9\x96\x42\x74\x5e\x3e\xc5\xd5\x29\x16\xbb\x85\xcf\xb4\xec\xa2\x38\xd5\x32\x6a\xe6\xc0\xd7\x8c\xb4\xd4\xc6\x32\x9d\xa0\x19\x32\x89\x66\xc7\x81\x32\x45\x69\xd1\x9a\x31\x82\x73\x25\x7e\x89\x44\x0c\x38\x27\x80\x17\x0d\x1f\x1c\x23\x7b\x47\x37\xe1\x4a\x61\x21\x6f\x0d\xb9\x93\xd9\xb3\x48\x3f\xe6\x76\xba\xbe\xff\x40\x3f\xdc\xcd\xaf\x4f\xb7\xfb\x36\x62\xbf\xc0\x80\xb4\xa5\x2d\x9c\xd0\xc5\xdc\x62\x22\xa3\x49\xa2\x0f\x8c\xac\x10\x24\xeb\x0f\xff\xfe\xd1\xc8\xab\x4f\x57\x7f\x07\x00\x00\xff\xff\xbb\x4b\xcb\x5e\x24\x05\x00\x00")

func Node_modulesKosuSystemContractsSrcDeployedaddressesJsonBytes() ([]byte, error) {
	return bindataRead(
		_Node_modulesKosuSystemContractsSrcDeployedaddressesJson,
		"../node_modules/@kosu/system-contracts/src/deployedAddresses.json",
	)
}

func Node_modulesKosuSystemContractsSrcDeployedaddressesJson() (*asset, error) {
	bytes, err := Node_modulesKosuSystemContractsSrcDeployedaddressesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../node_modules/@kosu/system-contracts/src/deployedAddresses.json", size: 1316, mode: os.FileMode(420), modTime: time.Unix(1564084128, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../node_modules/@kosu/system-contracts/src/deployedAddresses.json": Node_modulesKosuSystemContractsSrcDeployedaddressesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"node_modules": &bintree{nil, map[string]*bintree{
			"@kosu": &bintree{nil, map[string]*bintree{
				"system-contracts": &bintree{nil, map[string]*bintree{
					"src": &bintree{nil, map[string]*bintree{
						"deployedAddresses.json": &bintree{Node_modulesKosuSystemContractsSrcDeployedaddressesJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
